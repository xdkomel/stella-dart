// Dart File generated by the BNF Converter (bnfc 2.9.6).

import 'package:antlr4/antlr4.dart' show Token;
import 'package:fast_immutable_collections/fast_immutable_collections.dart' show IList;
import 'ast.dart';
import 'stella_parser.dart';  // fix this line depending on where the stellaParser is being lcated
int? buildInteger(Token? t) => t?.text != null ? int.tryParse(t!.text!) : null;
double? buildDouble(Token? t) => t?.text != null ? double.tryParse(t!.text!) : null;
String? buildString(Token? t) => t?.text;
String? buildChar(Token? t) => t?.text;
String? buildIdent(Token? t) => t?.text;
StellaIdent? buildStellaIdent(Token? t) => t?.text;
ExtensionName? buildExtensionName(Token? t) => t?.text;
MemoryAddress? buildMemoryAddress(Token? t) => t?.text;
Program? buildProgram(ProgramContext? ctx) {
  if (ctx is AProgramContext) return buildAProgram(ctx);
  return null;
}
AProgram? buildAProgram(AProgramContext? ctx) =>
  switch ((
    buildLanguageDecl(ctx?.p_1_1),
    buildListExtension(ctx?.p_1_2),
    buildListDecl(ctx?.p_1_3),
  )) {
    (
      final languageDecl?,
      final stellaExtensionList?,
      final declList?,
    ) =>
      AProgram(
        languageDecl: languageDecl,
        stellaExtensionList: stellaExtensionList,
        declList: declList,
      ),
    _ => null,
  };
IList<StellaIdent>? buildListStellaIdent(ListStellaIdentContext? ctx) {
  if (ctx is ListStellaIdent_EmptyContext) return buildListStellaIdentEmpty(ctx);
  if (ctx is ListStellaIdent_AppendLastContext) return buildListStellaIdentAppendLast(ctx);
  if (ctx is ListStellaIdent_PrependFirstContext) return buildListStellaIdentPrependFirst(ctx);
  return null;
}
IList<StellaIdent>? buildListStellaIdentEmpty(ListStellaIdent_EmptyContext? ctx) =>
  IList();
IList<StellaIdent>? buildListStellaIdentAppendLast(ListStellaIdent_AppendLastContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_2_1),
  )) {
    (
      final stellaIdent?,
    ) =>
      IList([stellaIdent]),
    _ => null,
  };
IList<StellaIdent>? buildListStellaIdentPrependFirst(ListStellaIdent_PrependFirstContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_3_1),
    buildListStellaIdent(ctx?.p_3_3),
  )) {
    (
      final stellaIdent?,
      final stellaIdentList?,
    ) =>
      IList([stellaIdent, ...stellaIdentList,]),
    _ => null,
  };
LanguageDecl? buildLanguageDecl(LanguageDeclContext? ctx) {
  if (ctx is LanguageCoreContext) return buildLanguageCore(ctx);
  return null;
}
LanguageCore? buildLanguageCore(LanguageCoreContext? ctx) =>
  LanguageCore(
  );
StellaExtension? buildExtension(ExtensionContext? ctx) {
  if (ctx is AnExtensionContext) return buildAnExtension(ctx);
  return null;
}
AnExtension? buildAnExtension(AnExtensionContext? ctx) =>
  switch ((
    buildListExtensionName(ctx?.p_1_3),
  )) {
    (
      final extensionNameList?,
    ) =>
      AnExtension(
        extensionNameList: extensionNameList,
      ),
    _ => null,
  };
IList<ExtensionName>? buildListExtensionName(ListExtensionNameContext? ctx) {
  if (ctx is ListExtensionName_EmptyContext) return buildListExtensionNameEmpty(ctx);
  if (ctx is ListExtensionName_AppendLastContext) return buildListExtensionNameAppendLast(ctx);
  if (ctx is ListExtensionName_PrependFirstContext) return buildListExtensionNamePrependFirst(ctx);
  return null;
}
IList<ExtensionName>? buildListExtensionNameEmpty(ListExtensionName_EmptyContext? ctx) =>
  IList();
IList<ExtensionName>? buildListExtensionNameAppendLast(ListExtensionName_AppendLastContext? ctx) =>
  switch ((
    buildExtensionName(ctx?.p_2_1),
  )) {
    (
      final extensionName?,
    ) =>
      IList([extensionName]),
    _ => null,
  };
IList<ExtensionName>? buildListExtensionNamePrependFirst(ListExtensionName_PrependFirstContext? ctx) =>
  switch ((
    buildExtensionName(ctx?.p_3_1),
    buildListExtensionName(ctx?.p_3_3),
  )) {
    (
      final extensionName?,
      final extensionNameList?,
    ) =>
      IList([extensionName, ...extensionNameList,]),
    _ => null,
  };
IList<StellaExtension>? buildListExtension(ListExtensionContext? ctx) {
  if (ctx is ListExtension_EmptyContext) return buildListExtensionEmpty(ctx);
  if (ctx is ListExtension_PrependFirstContext) return buildListExtensionPrependFirst(ctx);
  return null;
}
IList<StellaExtension>? buildListExtensionEmpty(ListExtension_EmptyContext? ctx) =>
  IList();
IList<StellaExtension>? buildListExtensionPrependFirst(ListExtension_PrependFirstContext? ctx) =>
  switch ((
    buildListExtension(ctx?.p_2_1),
    buildExtension(ctx?.p_2_2),
  )) {
    (
      final stellaExtensionList?,
      final stellaExtension?,
    ) =>
      IList([stellaExtension, ...stellaExtensionList,]),
    _ => null,
  };
Decl? buildDecl(DeclContext? ctx) {
  if (ctx is DeclFunContext) return buildDeclFun(ctx);
  if (ctx is DeclFunGenericContext) return buildDeclFunGeneric(ctx);
  if (ctx is DeclTypeAliasContext) return buildDeclTypeAlias(ctx);
  if (ctx is DeclExceptionTypeContext) return buildDeclExceptionType(ctx);
  if (ctx is DeclExceptionVariantContext) return buildDeclExceptionVariant(ctx);
  return null;
}
DeclFun? buildDeclFun(DeclFunContext? ctx) =>
  switch ((
    buildListAnnotation(ctx?.p_1_1),
    buildStellaIdent(ctx?.p_1_3),
    buildListParamDecl(ctx?.p_1_5),
    buildReturnType(ctx?.p_1_7),
    buildThrowType(ctx?.p_1_8),
    buildListDecl(ctx?.p_1_10),
    buildExpr(ctx?.p_1_12),
  )) {
    (
      final annotationList?,
      final stellaIdent?,
      final paramDeclList?,
      final returnType?,
      final throwType?,
      final declList?,
      final expr?,
    ) =>
      DeclFun(
        annotationList: annotationList,
        stellaIdent: stellaIdent,
        paramDeclList: paramDeclList,
        returnType: returnType,
        throwType: throwType,
        declList: declList,
        expr: expr,
      ),
    _ => null,
  };
DeclFunGeneric? buildDeclFunGeneric(DeclFunGenericContext? ctx) =>
  switch ((
    buildListAnnotation(ctx?.p_2_1),
    buildStellaIdent(ctx?.p_2_4),
    buildListStellaIdent(ctx?.p_2_6),
    buildListParamDecl(ctx?.p_2_9),
    buildReturnType(ctx?.p_2_11),
    buildThrowType(ctx?.p_2_12),
    buildListDecl(ctx?.p_2_14),
    buildExpr(ctx?.p_2_16),
  )) {
    (
      final annotationList?,
      final stellaIdent?,
      final stellaIdentList?,
      final paramDeclList?,
      final returnType?,
      final throwType?,
      final declList?,
      final expr?,
    ) =>
      DeclFunGeneric(
        annotationList: annotationList,
        stellaIdent: stellaIdent,
        stellaIdentList: stellaIdentList,
        paramDeclList: paramDeclList,
        returnType: returnType,
        throwType: throwType,
        declList: declList,
        expr: expr,
      ),
    _ => null,
  };
DeclTypeAlias? buildDeclTypeAlias(DeclTypeAliasContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_3_2),
    buildType(ctx?.p_3_4),
  )) {
    (
      final stellaIdent?,
      final stellaType?,
    ) =>
      DeclTypeAlias(
        stellaIdent: stellaIdent,
        stellaType: stellaType,
      ),
    _ => null,
  };
DeclExceptionType? buildDeclExceptionType(DeclExceptionTypeContext? ctx) =>
  switch ((
    buildType(ctx?.p_4_4),
  )) {
    (
      final stellaType?,
    ) =>
      DeclExceptionType(
        stellaType: stellaType,
      ),
    _ => null,
  };
DeclExceptionVariant? buildDeclExceptionVariant(DeclExceptionVariantContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_5_3),
    buildType(ctx?.p_5_5),
  )) {
    (
      final stellaIdent?,
      final stellaType?,
    ) =>
      DeclExceptionVariant(
        stellaIdent: stellaIdent,
        stellaType: stellaType,
      ),
    _ => null,
  };
IList<Decl>? buildListDecl(ListDeclContext? ctx) {
  if (ctx is ListDecl_EmptyContext) return buildListDeclEmpty(ctx);
  if (ctx is ListDecl_PrependFirstContext) return buildListDeclPrependFirst(ctx);
  return null;
}
IList<Decl>? buildListDeclEmpty(ListDecl_EmptyContext? ctx) =>
  IList();
IList<Decl>? buildListDeclPrependFirst(ListDecl_PrependFirstContext? ctx) =>
  switch ((
    buildListDecl(ctx?.p_2_1),
    buildDecl(ctx?.p_2_2),
  )) {
    (
      final declList?,
      final decl?,
    ) =>
      IList([decl, ...declList,]),
    _ => null,
  };
LocalDecl? buildLocalDecl(LocalDeclContext? ctx) {
  if (ctx is ALocalDeclContext) return buildALocalDecl(ctx);
  return null;
}
ALocalDecl? buildALocalDecl(ALocalDeclContext? ctx) =>
  switch ((
    buildDecl(ctx?.p_1_1),
  )) {
    (
      final decl?,
    ) =>
      ALocalDecl(
        decl: decl,
      ),
    _ => null,
  };
IList<LocalDecl>? buildListLocalDecl(ListLocalDeclContext? ctx) {
  if (ctx is ListLocalDecl_EmptyContext) return buildListLocalDeclEmpty(ctx);
  if (ctx is ListLocalDecl_PrependFirstContext) return buildListLocalDeclPrependFirst(ctx);
  return null;
}
IList<LocalDecl>? buildListLocalDeclEmpty(ListLocalDecl_EmptyContext? ctx) =>
  IList();
IList<LocalDecl>? buildListLocalDeclPrependFirst(ListLocalDecl_PrependFirstContext? ctx) =>
  switch ((
    buildListLocalDecl(ctx?.p_2_1),
    buildLocalDecl(ctx?.p_2_2),
  )) {
    (
      final localDeclList?,
      final localDecl?,
    ) =>
      IList([localDecl, ...localDeclList,]),
    _ => null,
  };
Annotation? buildAnnotation(AnnotationContext? ctx) {
  if (ctx is InlineAnnotationContext) return buildInlineAnnotation(ctx);
  return null;
}
InlineAnnotation? buildInlineAnnotation(InlineAnnotationContext? ctx) =>
  InlineAnnotation(
  );
IList<Annotation>? buildListAnnotation(ListAnnotationContext? ctx) {
  if (ctx is ListAnnotation_EmptyContext) return buildListAnnotationEmpty(ctx);
  if (ctx is ListAnnotation_PrependFirstContext) return buildListAnnotationPrependFirst(ctx);
  return null;
}
IList<Annotation>? buildListAnnotationEmpty(ListAnnotation_EmptyContext? ctx) =>
  IList();
IList<Annotation>? buildListAnnotationPrependFirst(ListAnnotation_PrependFirstContext? ctx) =>
  switch ((
    buildListAnnotation(ctx?.p_2_1),
    buildAnnotation(ctx?.p_2_2),
  )) {
    (
      final annotationList?,
      final annotation?,
    ) =>
      IList([annotation, ...annotationList,]),
    _ => null,
  };
ParamDecl? buildParamDecl(ParamDeclContext? ctx) {
  if (ctx is AParamDeclContext) return buildAParamDecl(ctx);
  return null;
}
AParamDecl? buildAParamDecl(AParamDeclContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_1_1),
    buildType(ctx?.p_1_3),
  )) {
    (
      final stellaIdent?,
      final stellaType?,
    ) =>
      AParamDecl(
        stellaIdent: stellaIdent,
        stellaType: stellaType,
      ),
    _ => null,
  };
IList<ParamDecl>? buildListParamDecl(ListParamDeclContext? ctx) {
  if (ctx is ListParamDecl_EmptyContext) return buildListParamDeclEmpty(ctx);
  if (ctx is ListParamDecl_AppendLastContext) return buildListParamDeclAppendLast(ctx);
  if (ctx is ListParamDecl_PrependFirstContext) return buildListParamDeclPrependFirst(ctx);
  return null;
}
IList<ParamDecl>? buildListParamDeclEmpty(ListParamDecl_EmptyContext? ctx) =>
  IList();
IList<ParamDecl>? buildListParamDeclAppendLast(ListParamDecl_AppendLastContext? ctx) =>
  switch ((
    buildParamDecl(ctx?.p_2_1),
  )) {
    (
      final paramDecl?,
    ) =>
      IList([paramDecl]),
    _ => null,
  };
IList<ParamDecl>? buildListParamDeclPrependFirst(ListParamDecl_PrependFirstContext? ctx) =>
  switch ((
    buildParamDecl(ctx?.p_3_1),
    buildListParamDecl(ctx?.p_3_3),
  )) {
    (
      final paramDecl?,
      final paramDeclList?,
    ) =>
      IList([paramDecl, ...paramDeclList,]),
    _ => null,
  };
ReturnType? buildReturnType(ReturnTypeContext? ctx) {
  if (ctx is NoReturnTypeContext) return buildNoReturnType(ctx);
  if (ctx is SomeReturnTypeContext) return buildSomeReturnType(ctx);
  return null;
}
NoReturnType? buildNoReturnType(NoReturnTypeContext? ctx) =>
  NoReturnType(
  );
SomeReturnType? buildSomeReturnType(SomeReturnTypeContext? ctx) =>
  switch ((
    buildType(ctx?.p_2_2),
  )) {
    (
      final stellaType?,
    ) =>
      SomeReturnType(
        stellaType: stellaType,
      ),
    _ => null,
  };
ThrowType? buildThrowType(ThrowTypeContext? ctx) {
  if (ctx is NoThrowTypeContext) return buildNoThrowType(ctx);
  if (ctx is SomeThrowTypeContext) return buildSomeThrowType(ctx);
  return null;
}
NoThrowType? buildNoThrowType(NoThrowTypeContext? ctx) =>
  NoThrowType(
  );
SomeThrowType? buildSomeThrowType(SomeThrowTypeContext? ctx) =>
  switch ((
    buildListType9(ctx?.p_2_2),
  )) {
    (
      final stellaTypeList?,
    ) =>
      SomeThrowType(
        stellaTypeList: stellaTypeList,
      ),
    _ => null,
  };
StellaType? buildType9(Type9Context? ctx) {
  if (ctx is Coercion_Type9_1Context) return buildType(ctx.p_1_1);
  return null;
}
IList<StellaType>? buildListType9(ListType9Context? ctx) {
  if (ctx is ListType9_AppendLastContext) return buildListType9AppendLast(ctx);
  if (ctx is ListType9_PrependFirstContext) return buildListType9PrependFirst(ctx);
  return null;
}
IList<StellaType>? buildListType9AppendLast(ListType9_AppendLastContext? ctx) =>
  switch ((
    buildType9(ctx?.p_1_1),
  )) {
    (
      final stellaType?,
    ) =>
      IList([stellaType]),
    _ => null,
  };
IList<StellaType>? buildListType9PrependFirst(ListType9_PrependFirstContext? ctx) =>
  switch ((
    buildType9(ctx?.p_2_1),
    buildListType9(ctx?.p_2_3),
  )) {
    (
      final stellaType?,
      final stellaTypeList?,
    ) =>
      IList([stellaType, ...stellaTypeList,]),
    _ => null,
  };
MatchCase? buildMatchCase(MatchCaseContext? ctx) {
  if (ctx is AMatchCaseContext) return buildAMatchCase(ctx);
  return null;
}
AMatchCase? buildAMatchCase(AMatchCaseContext? ctx) =>
  switch ((
    buildPattern(ctx?.p_1_1),
    buildExpr(ctx?.p_1_3),
  )) {
    (
      final pattern?,
      final expr?,
    ) =>
      AMatchCase(
        pattern: pattern,
        expr: expr,
      ),
    _ => null,
  };
IList<MatchCase>? buildListMatchCase(ListMatchCaseContext? ctx) {
  if (ctx is ListMatchCase_EmptyContext) return buildListMatchCaseEmpty(ctx);
  if (ctx is ListMatchCase_AppendLastContext) return buildListMatchCaseAppendLast(ctx);
  if (ctx is ListMatchCase_PrependFirstContext) return buildListMatchCasePrependFirst(ctx);
  return null;
}
IList<MatchCase>? buildListMatchCaseEmpty(ListMatchCase_EmptyContext? ctx) =>
  IList();
IList<MatchCase>? buildListMatchCaseAppendLast(ListMatchCase_AppendLastContext? ctx) =>
  switch ((
    buildMatchCase(ctx?.p_2_1),
  )) {
    (
      final matchCase?,
    ) =>
      IList([matchCase]),
    _ => null,
  };
IList<MatchCase>? buildListMatchCasePrependFirst(ListMatchCase_PrependFirstContext? ctx) =>
  switch ((
    buildMatchCase(ctx?.p_3_1),
    buildListMatchCase(ctx?.p_3_3),
  )) {
    (
      final matchCase?,
      final matchCaseList?,
    ) =>
      IList([matchCase, ...matchCaseList,]),
    _ => null,
  };
OptionalTyping? buildOptionalTyping(OptionalTypingContext? ctx) {
  if (ctx is NoTypingContext) return buildNoTyping(ctx);
  if (ctx is SomeTypingContext) return buildSomeTyping(ctx);
  return null;
}
NoTyping? buildNoTyping(NoTypingContext? ctx) =>
  NoTyping(
  );
SomeTyping? buildSomeTyping(SomeTypingContext? ctx) =>
  switch ((
    buildType(ctx?.p_2_2),
  )) {
    (
      final stellaType?,
    ) =>
      SomeTyping(
        stellaType: stellaType,
      ),
    _ => null,
  };
PatternData? buildPatternData(PatternDataContext? ctx) {
  if (ctx is NoPatternDataContext) return buildNoPatternData(ctx);
  if (ctx is SomePatternDataContext) return buildSomePatternData(ctx);
  return null;
}
NoPatternData? buildNoPatternData(NoPatternDataContext? ctx) =>
  NoPatternData(
  );
SomePatternData? buildSomePatternData(SomePatternDataContext? ctx) =>
  switch ((
    buildPattern(ctx?.p_2_2),
  )) {
    (
      final pattern?,
    ) =>
      SomePatternData(
        pattern: pattern,
      ),
    _ => null,
  };
ExprData? buildExprData(ExprDataContext? ctx) {
  if (ctx is NoExprDataContext) return buildNoExprData(ctx);
  if (ctx is SomeExprDataContext) return buildSomeExprData(ctx);
  return null;
}
NoExprData? buildNoExprData(NoExprDataContext? ctx) =>
  NoExprData(
  );
SomeExprData? buildSomeExprData(SomeExprDataContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_2_2),
  )) {
    (
      final expr?,
    ) =>
      SomeExprData(
        expr: expr,
      ),
    _ => null,
  };
Pattern? buildPattern(PatternContext? ctx) {
  if (ctx is PatternVariantContext) return buildPatternVariant(ctx);
  if (ctx is PatternInlContext) return buildPatternInl(ctx);
  if (ctx is PatternInrContext) return buildPatternInr(ctx);
  if (ctx is PatternTupleContext) return buildPatternTuple(ctx);
  if (ctx is PatternRecordContext) return buildPatternRecord(ctx);
  if (ctx is PatternListContext) return buildPatternList(ctx);
  if (ctx is PatternConsContext) return buildPatternCons(ctx);
  if (ctx is PatternFalseContext) return buildPatternFalse(ctx);
  if (ctx is PatternTrueContext) return buildPatternTrue(ctx);
  if (ctx is PatternUnitContext) return buildPatternUnit(ctx);
  if (ctx is PatternIntContext) return buildPatternInt(ctx);
  if (ctx is PatternSuccContext) return buildPatternSucc(ctx);
  if (ctx is PatternVarContext) return buildPatternVar(ctx);
  if (ctx is Coercion_Pattern_14Context) return buildPattern(ctx.p_14_2);
  return null;
}
PatternVariant? buildPatternVariant(PatternVariantContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_1_2),
    buildPatternData(ctx?.p_1_3),
  )) {
    (
      final stellaIdent?,
      final patternData?,
    ) =>
      PatternVariant(
        stellaIdent: stellaIdent,
        patternData: patternData,
      ),
    _ => null,
  };
PatternInl? buildPatternInl(PatternInlContext? ctx) =>
  switch ((
    buildPattern(ctx?.p_2_3),
  )) {
    (
      final pattern?,
    ) =>
      PatternInl(
        pattern: pattern,
      ),
    _ => null,
  };
PatternInr? buildPatternInr(PatternInrContext? ctx) =>
  switch ((
    buildPattern(ctx?.p_3_3),
  )) {
    (
      final pattern?,
    ) =>
      PatternInr(
        pattern: pattern,
      ),
    _ => null,
  };
PatternTuple? buildPatternTuple(PatternTupleContext? ctx) =>
  switch ((
    buildListPattern(ctx?.p_4_2),
  )) {
    (
      final patternList?,
    ) =>
      PatternTuple(
        patternList: patternList,
      ),
    _ => null,
  };
PatternRecord? buildPatternRecord(PatternRecordContext? ctx) =>
  switch ((
    buildListLabelledPattern(ctx?.p_5_2),
  )) {
    (
      final labelledPatternList?,
    ) =>
      PatternRecord(
        labelledPatternList: labelledPatternList,
      ),
    _ => null,
  };
PatternList? buildPatternList(PatternListContext? ctx) =>
  switch ((
    buildListPattern(ctx?.p_6_2),
  )) {
    (
      final patternList?,
    ) =>
      PatternList(
        patternList: patternList,
      ),
    _ => null,
  };
PatternCons? buildPatternCons(PatternConsContext? ctx) =>
  switch ((
    buildPattern(ctx?.p_7_2),
    buildPattern(ctx?.p_7_4),
  )) {
    (
      final pattern1?,
      final pattern2?,
    ) =>
      PatternCons(
        pattern1: pattern1,
        pattern2: pattern2,
      ),
    _ => null,
  };
PatternFalse? buildPatternFalse(PatternFalseContext? ctx) =>
  PatternFalse(
  );
PatternTrue? buildPatternTrue(PatternTrueContext? ctx) =>
  PatternTrue(
  );
PatternUnit? buildPatternUnit(PatternUnitContext? ctx) =>
  PatternUnit(
  );
PatternInt? buildPatternInt(PatternIntContext? ctx) =>
  switch ((
    buildInteger(ctx?.p_11_1),
  )) {
    (
      final integer?,
    ) =>
      PatternInt(
        integer: integer,
      ),
    _ => null,
  };
PatternSucc? buildPatternSucc(PatternSuccContext? ctx) =>
  switch ((
    buildPattern(ctx?.p_12_3),
  )) {
    (
      final pattern?,
    ) =>
      PatternSucc(
        pattern: pattern,
      ),
    _ => null,
  };
PatternVar? buildPatternVar(PatternVarContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_13_1),
  )) {
    (
      final stellaIdent?,
    ) =>
      PatternVar(
        stellaIdent: stellaIdent,
      ),
    _ => null,
  };
IList<Pattern>? buildListPattern(ListPatternContext? ctx) {
  if (ctx is ListPattern_EmptyContext) return buildListPatternEmpty(ctx);
  if (ctx is ListPattern_AppendLastContext) return buildListPatternAppendLast(ctx);
  if (ctx is ListPattern_PrependFirstContext) return buildListPatternPrependFirst(ctx);
  return null;
}
IList<Pattern>? buildListPatternEmpty(ListPattern_EmptyContext? ctx) =>
  IList();
IList<Pattern>? buildListPatternAppendLast(ListPattern_AppendLastContext? ctx) =>
  switch ((
    buildPattern(ctx?.p_2_1),
  )) {
    (
      final pattern?,
    ) =>
      IList([pattern]),
    _ => null,
  };
IList<Pattern>? buildListPatternPrependFirst(ListPattern_PrependFirstContext? ctx) =>
  switch ((
    buildPattern(ctx?.p_3_1),
    buildListPattern(ctx?.p_3_3),
  )) {
    (
      final pattern?,
      final patternList?,
    ) =>
      IList([pattern, ...patternList,]),
    _ => null,
  };
LabelledPattern? buildLabelledPattern(LabelledPatternContext? ctx) {
  if (ctx is ALabelledPatternContext) return buildALabelledPattern(ctx);
  return null;
}
ALabelledPattern? buildALabelledPattern(ALabelledPatternContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_1_1),
    buildPattern(ctx?.p_1_3),
  )) {
    (
      final stellaIdent?,
      final pattern?,
    ) =>
      ALabelledPattern(
        stellaIdent: stellaIdent,
        pattern: pattern,
      ),
    _ => null,
  };
IList<LabelledPattern>? buildListLabelledPattern(ListLabelledPatternContext? ctx) {
  if (ctx is ListLabelledPattern_AppendLastContext) return buildListLabelledPatternAppendLast(ctx);
  if (ctx is ListLabelledPattern_PrependFirstContext) return buildListLabelledPatternPrependFirst(ctx);
  return null;
}
IList<LabelledPattern>? buildListLabelledPatternAppendLast(ListLabelledPattern_AppendLastContext? ctx) =>
  switch ((
    buildLabelledPattern(ctx?.p_1_1),
  )) {
    (
      final labelledPattern?,
    ) =>
      IList([labelledPattern]),
    _ => null,
  };
IList<LabelledPattern>? buildListLabelledPatternPrependFirst(ListLabelledPattern_PrependFirstContext? ctx) =>
  switch ((
    buildLabelledPattern(ctx?.p_2_1),
    buildListLabelledPattern(ctx?.p_2_3),
  )) {
    (
      final labelledPattern?,
      final labelledPatternList?,
    ) =>
      IList([labelledPattern, ...labelledPatternList,]),
    _ => null,
  };
Binding? buildBinding(BindingContext? ctx) {
  if (ctx is ABindingContext) return buildABinding(ctx);
  return null;
}
ABinding? buildABinding(ABindingContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_1_1),
    buildExpr(ctx?.p_1_3),
  )) {
    (
      final stellaIdent?,
      final expr?,
    ) =>
      ABinding(
        stellaIdent: stellaIdent,
        expr: expr,
      ),
    _ => null,
  };
IList<Binding>? buildListBinding(ListBindingContext? ctx) {
  if (ctx is ListBinding_AppendLastContext) return buildListBindingAppendLast(ctx);
  if (ctx is ListBinding_PrependFirstContext) return buildListBindingPrependFirst(ctx);
  return null;
}
IList<Binding>? buildListBindingAppendLast(ListBinding_AppendLastContext? ctx) =>
  switch ((
    buildBinding(ctx?.p_1_1),
  )) {
    (
      final binding?,
    ) =>
      IList([binding]),
    _ => null,
  };
IList<Binding>? buildListBindingPrependFirst(ListBinding_PrependFirstContext? ctx) =>
  switch ((
    buildBinding(ctx?.p_2_1),
    buildListBinding(ctx?.p_2_3),
  )) {
    (
      final binding?,
      final bindingList?,
    ) =>
      IList([binding, ...bindingList,]),
    _ => null,
  };
Expr? buildExpr(ExprContext? ctx) {
  if (ctx is SequenceContext) return buildSequence(ctx);
  if (ctx is Coercion_Expr_2Context) return buildExpr1(ctx.p_2_1);
  if (ctx is LetContext) return buildLet(ctx);
  if (ctx is LetRecContext) return buildLetRec(ctx);
  if (ctx is TypeAbstractionContext) return buildTypeAbstraction(ctx);
  if (ctx is Coercion_Expr_6Context) return buildExpr1(ctx.p_6_1);
  return null;
}
Sequence? buildSequence(SequenceContext? ctx) =>
  switch ((
    buildExpr1(ctx?.p_1_1),
    buildExpr(ctx?.p_1_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      Sequence(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
Let? buildLet(LetContext? ctx) =>
  switch ((
    buildListPatternBinding(ctx?.p_3_2),
    buildExpr(ctx?.p_3_4),
  )) {
    (
      final patternBindingList?,
      final expr?,
    ) =>
      Let(
        patternBindingList: patternBindingList,
        expr: expr,
      ),
    _ => null,
  };
LetRec? buildLetRec(LetRecContext? ctx) =>
  switch ((
    buildListPatternBinding(ctx?.p_4_2),
    buildExpr(ctx?.p_4_4),
  )) {
    (
      final patternBindingList?,
      final expr?,
    ) =>
      LetRec(
        patternBindingList: patternBindingList,
        expr: expr,
      ),
    _ => null,
  };
TypeAbstraction? buildTypeAbstraction(TypeAbstractionContext? ctx) =>
  switch ((
    buildListStellaIdent(ctx?.p_5_3),
    buildExpr(ctx?.p_5_5),
  )) {
    (
      final stellaIdentList?,
      final expr?,
    ) =>
      TypeAbstraction(
        stellaIdentList: stellaIdentList,
        expr: expr,
      ),
    _ => null,
  };
IList<Expr>? buildListExpr(ListExprContext? ctx) {
  if (ctx is ListExpr_EmptyContext) return buildListExprEmpty(ctx);
  if (ctx is ListExpr_AppendLastContext) return buildListExprAppendLast(ctx);
  if (ctx is ListExpr_PrependFirstContext) return buildListExprPrependFirst(ctx);
  return null;
}
IList<Expr>? buildListExprEmpty(ListExpr_EmptyContext? ctx) =>
  IList();
IList<Expr>? buildListExprAppendLast(ListExpr_AppendLastContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_2_1),
  )) {
    (
      final expr?,
    ) =>
      IList([expr]),
    _ => null,
  };
IList<Expr>? buildListExprPrependFirst(ListExpr_PrependFirstContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_3_1),
    buildListExpr(ctx?.p_3_3),
  )) {
    (
      final expr?,
      final exprList?,
    ) =>
      IList([expr, ...exprList,]),
    _ => null,
  };
Expr? buildExpr1(Expr1Context? ctx) {
  if (ctx is AssignContext) return buildAssign(ctx);
  if (ctx is IfContext) return buildIf(ctx);
  if (ctx is Coercion_Expr1_3Context) return buildExpr2(ctx.p_3_1);
  return null;
}
Assign? buildAssign(AssignContext? ctx) =>
  switch ((
    buildExpr2(ctx?.p_1_1),
    buildExpr1(ctx?.p_1_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      Assign(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
StellaIf? buildIf(IfContext? ctx) =>
  switch ((
    buildExpr1(ctx?.p_2_2),
    buildExpr1(ctx?.p_2_4),
    buildExpr1(ctx?.p_2_6),
  )) {
    (
      final expr1?,
      final expr2?,
      final expr3?,
    ) =>
      StellaIf(
        expr1: expr1,
        expr2: expr2,
        expr3: expr3,
      ),
    _ => null,
  };
PatternBinding? buildPatternBinding(PatternBindingContext? ctx) {
  if (ctx is APatternBindingContext) return buildAPatternBinding(ctx);
  return null;
}
APatternBinding? buildAPatternBinding(APatternBindingContext? ctx) =>
  switch ((
    buildPattern(ctx?.p_1_1),
    buildExpr(ctx?.p_1_3),
  )) {
    (
      final pattern?,
      final expr?,
    ) =>
      APatternBinding(
        pattern: pattern,
        expr: expr,
      ),
    _ => null,
  };
IList<PatternBinding>? buildListPatternBinding(ListPatternBindingContext? ctx) {
  if (ctx is ListPatternBinding_AppendLastContext) return buildListPatternBindingAppendLast(ctx);
  if (ctx is ListPatternBinding_PrependFirstContext) return buildListPatternBindingPrependFirst(ctx);
  return null;
}
IList<PatternBinding>? buildListPatternBindingAppendLast(ListPatternBinding_AppendLastContext? ctx) =>
  switch ((
    buildPatternBinding(ctx?.p_1_1),
  )) {
    (
      final patternBinding?,
    ) =>
      IList([patternBinding]),
    _ => null,
  };
IList<PatternBinding>? buildListPatternBindingPrependFirst(ListPatternBinding_PrependFirstContext? ctx) =>
  switch ((
    buildPatternBinding(ctx?.p_2_1),
    buildListPatternBinding(ctx?.p_2_3),
  )) {
    (
      final patternBinding?,
      final patternBindingList?,
    ) =>
      IList([patternBinding, ...patternBindingList,]),
    _ => null,
  };
Expr? buildExpr2(Expr2Context? ctx) {
  if (ctx is LessThanContext) return buildLessThan(ctx);
  if (ctx is LessThanOrEqualContext) return buildLessThanOrEqual(ctx);
  if (ctx is GreaterThanContext) return buildGreaterThan(ctx);
  if (ctx is GreaterThanOrEqualContext) return buildGreaterThanOrEqual(ctx);
  if (ctx is EqualContext) return buildEqual(ctx);
  if (ctx is NotEqualContext) return buildNotEqual(ctx);
  if (ctx is Coercion_Expr2_7Context) return buildExpr3(ctx.p_7_1);
  return null;
}
LessThan? buildLessThan(LessThanContext? ctx) =>
  switch ((
    buildExpr3(ctx?.p_1_1),
    buildExpr3(ctx?.p_1_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      LessThan(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
LessThanOrEqual? buildLessThanOrEqual(LessThanOrEqualContext? ctx) =>
  switch ((
    buildExpr3(ctx?.p_2_1),
    buildExpr3(ctx?.p_2_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      LessThanOrEqual(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
GreaterThan? buildGreaterThan(GreaterThanContext? ctx) =>
  switch ((
    buildExpr3(ctx?.p_3_1),
    buildExpr3(ctx?.p_3_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      GreaterThan(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
GreaterThanOrEqual? buildGreaterThanOrEqual(GreaterThanOrEqualContext? ctx) =>
  switch ((
    buildExpr3(ctx?.p_4_1),
    buildExpr3(ctx?.p_4_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      GreaterThanOrEqual(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
Equal? buildEqual(EqualContext? ctx) =>
  switch ((
    buildExpr3(ctx?.p_5_1),
    buildExpr3(ctx?.p_5_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      Equal(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
NotEqual? buildNotEqual(NotEqualContext? ctx) =>
  switch ((
    buildExpr3(ctx?.p_6_1),
    buildExpr3(ctx?.p_6_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      NotEqual(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
IList<Expr>? buildListExpr2(ListExpr2Context? ctx) {
  if (ctx is ListExpr2_AppendLastContext) return buildListExpr2AppendLast(ctx);
  if (ctx is ListExpr2_PrependFirstContext) return buildListExpr2PrependFirst(ctx);
  return null;
}
IList<Expr>? buildListExpr2AppendLast(ListExpr2_AppendLastContext? ctx) =>
  switch ((
    buildExpr2(ctx?.p_1_1),
  )) {
    (
      final expr?,
    ) =>
      IList([expr]),
    _ => null,
  };
IList<Expr>? buildListExpr2PrependFirst(ListExpr2_PrependFirstContext? ctx) =>
  switch ((
    buildExpr2(ctx?.p_2_1),
    buildListExpr2(ctx?.p_2_3),
  )) {
    (
      final expr?,
      final exprList?,
    ) =>
      IList([expr, ...exprList,]),
    _ => null,
  };
Expr? buildExpr3(Expr3Context? ctx) {
  if (ctx is TypeAscContext) return buildTypeAsc(ctx);
  if (ctx is TypeCastContext) return buildTypeCast(ctx);
  if (ctx is AbstractionContext) return buildAbstraction(ctx);
  if (ctx is VariantContext) return buildVariant(ctx);
  if (ctx is MatchContext) return buildMatch(ctx);
  if (ctx is ListContext) return buildList(ctx);
  if (ctx is AddContext) return buildAdd(ctx);
  if (ctx is SubtractContext) return buildSubtract(ctx);
  if (ctx is LogicOrContext) return buildLogicOr(ctx);
  if (ctx is Coercion_Expr3_10Context) return buildExpr4(ctx.p_10_1);
  return null;
}
TypeAsc? buildTypeAsc(TypeAscContext? ctx) =>
  switch ((
    buildExpr3(ctx?.p_1_1),
    buildType2(ctx?.p_1_3),
  )) {
    (
      final expr?,
      final stellaType?,
    ) =>
      TypeAsc(
        expr: expr,
        stellaType: stellaType,
      ),
    _ => null,
  };
TypeCast? buildTypeCast(TypeCastContext? ctx) =>
  switch ((
    buildExpr3(ctx?.p_2_1),
    buildType2(ctx?.p_2_4),
  )) {
    (
      final expr?,
      final stellaType?,
    ) =>
      TypeCast(
        expr: expr,
        stellaType: stellaType,
      ),
    _ => null,
  };
Abstraction? buildAbstraction(AbstractionContext? ctx) =>
  switch ((
    buildListParamDecl(ctx?.p_3_3),
    buildExpr(ctx?.p_3_7),
  )) {
    (
      final paramDeclList?,
      final expr?,
    ) =>
      Abstraction(
        paramDeclList: paramDeclList,
        expr: expr,
      ),
    _ => null,
  };
Variant? buildVariant(VariantContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_4_2),
    buildExprData(ctx?.p_4_3),
  )) {
    (
      final stellaIdent?,
      final exprData?,
    ) =>
      Variant(
        stellaIdent: stellaIdent,
        exprData: exprData,
      ),
    _ => null,
  };
Match? buildMatch(MatchContext? ctx) =>
  switch ((
    buildExpr2(ctx?.p_5_2),
    buildListMatchCase(ctx?.p_5_4),
  )) {
    (
      final expr?,
      final matchCaseList?,
    ) =>
      Match(
        expr: expr,
        matchCaseList: matchCaseList,
      ),
    _ => null,
  };
StellaList? buildList(ListContext? ctx) =>
  switch ((
    buildListExpr(ctx?.p_6_2),
  )) {
    (
      final exprList?,
    ) =>
      StellaList(
        exprList: exprList,
      ),
    _ => null,
  };
Add? buildAdd(AddContext? ctx) =>
  switch ((
    buildExpr3(ctx?.p_7_1),
    buildExpr4(ctx?.p_7_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      Add(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
Subtract? buildSubtract(SubtractContext? ctx) =>
  switch ((
    buildExpr3(ctx?.p_8_1),
    buildExpr4(ctx?.p_8_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      Subtract(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
LogicOr? buildLogicOr(LogicOrContext? ctx) =>
  switch ((
    buildExpr3(ctx?.p_9_1),
    buildExpr4(ctx?.p_9_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      LogicOr(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
Expr? buildExpr4(Expr4Context? ctx) {
  if (ctx is MultiplyContext) return buildMultiply(ctx);
  if (ctx is DivideContext) return buildDivide(ctx);
  if (ctx is LogicAndContext) return buildLogicAnd(ctx);
  if (ctx is Coercion_Expr4_4Context) return buildExpr5(ctx.p_4_1);
  return null;
}
Multiply? buildMultiply(MultiplyContext? ctx) =>
  switch ((
    buildExpr4(ctx?.p_1_1),
    buildExpr5(ctx?.p_1_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      Multiply(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
Divide? buildDivide(DivideContext? ctx) =>
  switch ((
    buildExpr4(ctx?.p_2_1),
    buildExpr5(ctx?.p_2_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      Divide(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
LogicAnd? buildLogicAnd(LogicAndContext? ctx) =>
  switch ((
    buildExpr4(ctx?.p_3_1),
    buildExpr5(ctx?.p_3_3),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      LogicAnd(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
Expr? buildExpr5(Expr5Context? ctx) {
  if (ctx is RefContext) return buildRef(ctx);
  if (ctx is DerefContext) return buildDeref(ctx);
  if (ctx is Coercion_Expr5_3Context) return buildExpr6(ctx.p_3_1);
  return null;
}
Ref? buildRef(RefContext? ctx) =>
  switch ((
    buildExpr5(ctx?.p_1_3),
  )) {
    (
      final expr?,
    ) =>
      Ref(
        expr: expr,
      ),
    _ => null,
  };
Deref? buildDeref(DerefContext? ctx) =>
  switch ((
    buildExpr5(ctx?.p_2_2),
  )) {
    (
      final expr?,
    ) =>
      Deref(
        expr: expr,
      ),
    _ => null,
  };
Expr? buildExpr6(Expr6Context? ctx) {
  if (ctx is ApplicationContext) return buildApplication(ctx);
  if (ctx is TypeApplicationContext) return buildTypeApplication(ctx);
  if (ctx is DotRecordContext) return buildDotRecord(ctx);
  if (ctx is DotTupleContext) return buildDotTuple(ctx);
  if (ctx is TupleContext) return buildTuple(ctx);
  if (ctx is RecordContext) return buildRecord(ctx);
  if (ctx is ConsListContext) return buildConsList(ctx);
  if (ctx is HeadContext) return buildHead(ctx);
  if (ctx is IsEmptyContext) return buildIsEmpty(ctx);
  if (ctx is TailContext) return buildTail(ctx);
  if (ctx is PanicContext) return buildPanic(ctx);
  if (ctx is ThrowContext) return buildThrow(ctx);
  if (ctx is TryCatchContext) return buildTryCatch(ctx);
  if (ctx is TryWithContext) return buildTryWith(ctx);
  if (ctx is InlContext) return buildInl(ctx);
  if (ctx is InrContext) return buildInr(ctx);
  if (ctx is SuccContext) return buildSucc(ctx);
  if (ctx is LogicNotContext) return buildLogicNot(ctx);
  if (ctx is PredContext) return buildPred(ctx);
  if (ctx is IsZeroContext) return buildIsZero(ctx);
  if (ctx is FixContext) return buildFix(ctx);
  if (ctx is NatRecContext) return buildNatRec(ctx);
  if (ctx is FoldContext) return buildFold(ctx);
  if (ctx is UnfoldContext) return buildUnfold(ctx);
  if (ctx is Coercion_Expr6_25Context) return buildExpr7(ctx.p_25_1);
  return null;
}
Application? buildApplication(ApplicationContext? ctx) =>
  switch ((
    buildExpr6(ctx?.p_1_1),
    buildListExpr(ctx?.p_1_3),
  )) {
    (
      final expr?,
      final exprList?,
    ) =>
      Application(
        expr: expr,
        exprList: exprList,
      ),
    _ => null,
  };
TypeApplication? buildTypeApplication(TypeApplicationContext? ctx) =>
  switch ((
    buildExpr6(ctx?.p_2_1),
    buildListType(ctx?.p_2_3),
  )) {
    (
      final expr?,
      final stellaTypeList?,
    ) =>
      TypeApplication(
        expr: expr,
        stellaTypeList: stellaTypeList,
      ),
    _ => null,
  };
DotRecord? buildDotRecord(DotRecordContext? ctx) =>
  switch ((
    buildExpr6(ctx?.p_3_1),
    buildStellaIdent(ctx?.p_3_3),
  )) {
    (
      final expr?,
      final stellaIdent?,
    ) =>
      DotRecord(
        expr: expr,
        stellaIdent: stellaIdent,
      ),
    _ => null,
  };
DotTuple? buildDotTuple(DotTupleContext? ctx) =>
  switch ((
    buildExpr6(ctx?.p_4_1),
    buildInteger(ctx?.p_4_3),
  )) {
    (
      final expr?,
      final integer?,
    ) =>
      DotTuple(
        expr: expr,
        integer: integer,
      ),
    _ => null,
  };
Tuple? buildTuple(TupleContext? ctx) =>
  switch ((
    buildListExpr(ctx?.p_5_2),
  )) {
    (
      final exprList?,
    ) =>
      Tuple(
        exprList: exprList,
      ),
    _ => null,
  };
Record? buildRecord(RecordContext? ctx) =>
  switch ((
    buildListBinding(ctx?.p_6_2),
  )) {
    (
      final bindingList?,
    ) =>
      Record(
        bindingList: bindingList,
      ),
    _ => null,
  };
ConsList? buildConsList(ConsListContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_7_3),
    buildExpr(ctx?.p_7_5),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      ConsList(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
Head? buildHead(HeadContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_8_3),
  )) {
    (
      final expr?,
    ) =>
      Head(
        expr: expr,
      ),
    _ => null,
  };
IsEmpty? buildIsEmpty(IsEmptyContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_9_3),
  )) {
    (
      final expr?,
    ) =>
      IsEmpty(
        expr: expr,
      ),
    _ => null,
  };
Tail? buildTail(TailContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_10_3),
  )) {
    (
      final expr?,
    ) =>
      Tail(
        expr: expr,
      ),
    _ => null,
  };
Panic? buildPanic(PanicContext? ctx) =>
  Panic(
  );
StellaThrow? buildThrow(ThrowContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_12_3),
  )) {
    (
      final expr?,
    ) =>
      StellaThrow(
        expr: expr,
      ),
    _ => null,
  };
TryCatch? buildTryCatch(TryCatchContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_13_3),
    buildPattern(ctx?.p_13_7),
    buildExpr(ctx?.p_13_9),
  )) {
    (
      final expr1?,
      final pattern?,
      final expr2?,
    ) =>
      TryCatch(
        expr1: expr1,
        pattern: pattern,
        expr2: expr2,
      ),
    _ => null,
  };
TryWith? buildTryWith(TryWithContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_14_3),
    buildExpr(ctx?.p_14_7),
  )) {
    (
      final expr1?,
      final expr2?,
    ) =>
      TryWith(
        expr1: expr1,
        expr2: expr2,
      ),
    _ => null,
  };
Inl? buildInl(InlContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_15_3),
  )) {
    (
      final expr?,
    ) =>
      Inl(
        expr: expr,
      ),
    _ => null,
  };
Inr? buildInr(InrContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_16_3),
  )) {
    (
      final expr?,
    ) =>
      Inr(
        expr: expr,
      ),
    _ => null,
  };
Succ? buildSucc(SuccContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_17_3),
  )) {
    (
      final expr?,
    ) =>
      Succ(
        expr: expr,
      ),
    _ => null,
  };
LogicNot? buildLogicNot(LogicNotContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_18_3),
  )) {
    (
      final expr?,
    ) =>
      LogicNot(
        expr: expr,
      ),
    _ => null,
  };
Pred? buildPred(PredContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_19_3),
  )) {
    (
      final expr?,
    ) =>
      Pred(
        expr: expr,
      ),
    _ => null,
  };
IsZero? buildIsZero(IsZeroContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_20_3),
  )) {
    (
      final expr?,
    ) =>
      IsZero(
        expr: expr,
      ),
    _ => null,
  };
Fix? buildFix(FixContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_21_3),
  )) {
    (
      final expr?,
    ) =>
      Fix(
        expr: expr,
      ),
    _ => null,
  };
NatRec? buildNatRec(NatRecContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_22_3),
    buildExpr(ctx?.p_22_5),
    buildExpr(ctx?.p_22_7),
  )) {
    (
      final expr1?,
      final expr2?,
      final expr3?,
    ) =>
      NatRec(
        expr1: expr1,
        expr2: expr2,
        expr3: expr3,
      ),
    _ => null,
  };
Fold? buildFold(FoldContext? ctx) =>
  switch ((
    buildType(ctx?.p_23_3),
    buildExpr7(ctx?.p_23_5),
  )) {
    (
      final stellaType?,
      final expr?,
    ) =>
      Fold(
        stellaType: stellaType,
        expr: expr,
      ),
    _ => null,
  };
Unfold? buildUnfold(UnfoldContext? ctx) =>
  switch ((
    buildType(ctx?.p_24_3),
    buildExpr7(ctx?.p_24_5),
  )) {
    (
      final stellaType?,
      final expr?,
    ) =>
      Unfold(
        stellaType: stellaType,
        expr: expr,
      ),
    _ => null,
  };
Expr? buildExpr7(Expr7Context? ctx) {
  if (ctx is ConstTrueContext) return buildConstTrue(ctx);
  if (ctx is ConstFalseContext) return buildConstFalse(ctx);
  if (ctx is ConstUnitContext) return buildConstUnit(ctx);
  if (ctx is ConstIntContext) return buildConstInt(ctx);
  if (ctx is ConstDoubleContext) return buildConstDouble(ctx);
  if (ctx is ConstMemoryContext) return buildConstMemory(ctx);
  if (ctx is VarContext) return buildVar(ctx);
  if (ctx is Coercion_Expr7_8Context) return buildExpr(ctx.p_8_2);
  return null;
}
ConstTrue? buildConstTrue(ConstTrueContext? ctx) =>
  ConstTrue(
  );
ConstFalse? buildConstFalse(ConstFalseContext? ctx) =>
  ConstFalse(
  );
ConstUnit? buildConstUnit(ConstUnitContext? ctx) =>
  ConstUnit(
  );
ConstInt? buildConstInt(ConstIntContext? ctx) =>
  switch ((
    buildInteger(ctx?.p_4_1),
  )) {
    (
      final integer?,
    ) =>
      ConstInt(
        integer: integer,
      ),
    _ => null,
  };
ConstDouble? buildConstDouble(ConstDoubleContext? ctx) =>
  switch ((
    buildDouble(ctx?.p_5_1),
  )) {
    (
      final stellaDouble?,
    ) =>
      ConstDouble(
        stellaDouble: stellaDouble,
      ),
    _ => null,
  };
ConstMemory? buildConstMemory(ConstMemoryContext? ctx) =>
  switch ((
    buildMemoryAddress(ctx?.p_6_1),
  )) {
    (
      final memoryAddress?,
    ) =>
      ConstMemory(
        memoryAddress: memoryAddress,
      ),
    _ => null,
  };
StellaVar? buildVar(VarContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_7_1),
  )) {
    (
      final stellaIdent?,
    ) =>
      StellaVar(
        stellaIdent: stellaIdent,
      ),
    _ => null,
  };
StellaType? buildType(TypeContext? ctx) {
  if (ctx is TypeFunContext) return buildTypeFun(ctx);
  if (ctx is TypeForAllContext) return buildTypeForAll(ctx);
  if (ctx is TypeRecContext) return buildTypeRec(ctx);
  if (ctx is Coercion_Type_4Context) return buildType1(ctx.p_4_1);
  return null;
}
TypeFun? buildTypeFun(TypeFunContext? ctx) =>
  switch ((
    buildListType(ctx?.p_1_3),
    buildType(ctx?.p_1_6),
  )) {
    (
      final stellaTypeList?,
      final stellaType?,
    ) =>
      TypeFun(
        stellaTypeList: stellaTypeList,
        stellaType: stellaType,
      ),
    _ => null,
  };
TypeForAll? buildTypeForAll(TypeForAllContext? ctx) =>
  switch ((
    buildListStellaIdent(ctx?.p_2_2),
    buildType(ctx?.p_2_4),
  )) {
    (
      final stellaIdentList?,
      final stellaType?,
    ) =>
      TypeForAll(
        stellaIdentList: stellaIdentList,
        stellaType: stellaType,
      ),
    _ => null,
  };
TypeRec? buildTypeRec(TypeRecContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_3_2),
    buildType(ctx?.p_3_4),
  )) {
    (
      final stellaIdent?,
      final stellaType?,
    ) =>
      TypeRec(
        stellaIdent: stellaIdent,
        stellaType: stellaType,
      ),
    _ => null,
  };
StellaType? buildType1(Type1Context? ctx) {
  if (ctx is TypeSumContext) return buildTypeSum(ctx);
  if (ctx is Coercion_Type1_2Context) return buildType2(ctx.p_2_1);
  return null;
}
TypeSum? buildTypeSum(TypeSumContext? ctx) =>
  switch ((
    buildType2(ctx?.p_1_1),
    buildType2(ctx?.p_1_3),
  )) {
    (
      final stellaType1?,
      final stellaType2?,
    ) =>
      TypeSum(
        stellaType1: stellaType1,
        stellaType2: stellaType2,
      ),
    _ => null,
  };
StellaType? buildType2(Type2Context? ctx) {
  if (ctx is TypeTupleContext) return buildTypeTuple(ctx);
  if (ctx is TypeRecordContext) return buildTypeRecord(ctx);
  if (ctx is TypeVariantContext) return buildTypeVariant(ctx);
  if (ctx is TypeListContext) return buildTypeList(ctx);
  if (ctx is Coercion_Type2_5Context) return buildType3(ctx.p_5_1);
  return null;
}
TypeTuple? buildTypeTuple(TypeTupleContext? ctx) =>
  switch ((
    buildListType(ctx?.p_1_2),
  )) {
    (
      final stellaTypeList?,
    ) =>
      TypeTuple(
        stellaTypeList: stellaTypeList,
      ),
    _ => null,
  };
TypeRecord? buildTypeRecord(TypeRecordContext? ctx) =>
  switch ((
    buildListRecordFieldType(ctx?.p_2_2),
  )) {
    (
      final recordFieldTypeList?,
    ) =>
      TypeRecord(
        recordFieldTypeList: recordFieldTypeList,
      ),
    _ => null,
  };
TypeVariant? buildTypeVariant(TypeVariantContext? ctx) =>
  switch ((
    buildListVariantFieldType(ctx?.p_3_2),
  )) {
    (
      final variantFieldTypeList?,
    ) =>
      TypeVariant(
        variantFieldTypeList: variantFieldTypeList,
      ),
    _ => null,
  };
TypeList? buildTypeList(TypeListContext? ctx) =>
  switch ((
    buildType(ctx?.p_4_2),
  )) {
    (
      final stellaType?,
    ) =>
      TypeList(
        stellaType: stellaType,
      ),
    _ => null,
  };
StellaType? buildType3(Type3Context? ctx) {
  if (ctx is TypeBoolContext) return buildTypeBool(ctx);
  if (ctx is TypeNatContext) return buildTypeNat(ctx);
  if (ctx is TypeUnitContext) return buildTypeUnit(ctx);
  if (ctx is TypeTopContext) return buildTypeTop(ctx);
  if (ctx is TypeBottomContext) return buildTypeBottom(ctx);
  if (ctx is TypeRefContext) return buildTypeRef(ctx);
  if (ctx is TypeVarContext) return buildTypeVar(ctx);
  if (ctx is Coercion_Type3_8Context) return buildType(ctx.p_8_2);
  return null;
}
TypeBool? buildTypeBool(TypeBoolContext? ctx) =>
  TypeBool(
  );
TypeNat? buildTypeNat(TypeNatContext? ctx) =>
  TypeNat(
  );
TypeUnit? buildTypeUnit(TypeUnitContext? ctx) =>
  TypeUnit(
  );
TypeTop? buildTypeTop(TypeTopContext? ctx) =>
  TypeTop(
  );
TypeBottom? buildTypeBottom(TypeBottomContext? ctx) =>
  TypeBottom(
  );
TypeRef? buildTypeRef(TypeRefContext? ctx) =>
  switch ((
    buildType2(ctx?.p_6_2),
  )) {
    (
      final stellaType?,
    ) =>
      TypeRef(
        stellaType: stellaType,
      ),
    _ => null,
  };
TypeVar? buildTypeVar(TypeVarContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_7_1),
  )) {
    (
      final stellaIdent?,
    ) =>
      TypeVar(
        stellaIdent: stellaIdent,
      ),
    _ => null,
  };
IList<StellaType>? buildListType(ListTypeContext? ctx) {
  if (ctx is ListType_EmptyContext) return buildListTypeEmpty(ctx);
  if (ctx is ListType_AppendLastContext) return buildListTypeAppendLast(ctx);
  if (ctx is ListType_PrependFirstContext) return buildListTypePrependFirst(ctx);
  return null;
}
IList<StellaType>? buildListTypeEmpty(ListType_EmptyContext? ctx) =>
  IList();
IList<StellaType>? buildListTypeAppendLast(ListType_AppendLastContext? ctx) =>
  switch ((
    buildType(ctx?.p_2_1),
  )) {
    (
      final stellaType?,
    ) =>
      IList([stellaType]),
    _ => null,
  };
IList<StellaType>? buildListTypePrependFirst(ListType_PrependFirstContext? ctx) =>
  switch ((
    buildType(ctx?.p_3_1),
    buildListType(ctx?.p_3_3),
  )) {
    (
      final stellaType?,
      final stellaTypeList?,
    ) =>
      IList([stellaType, ...stellaTypeList,]),
    _ => null,
  };
VariantFieldType? buildVariantFieldType(VariantFieldTypeContext? ctx) {
  if (ctx is AVariantFieldTypeContext) return buildAVariantFieldType(ctx);
  return null;
}
AVariantFieldType? buildAVariantFieldType(AVariantFieldTypeContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_1_1),
    buildOptionalTyping(ctx?.p_1_2),
  )) {
    (
      final stellaIdent?,
      final optionalTyping?,
    ) =>
      AVariantFieldType(
        stellaIdent: stellaIdent,
        optionalTyping: optionalTyping,
      ),
    _ => null,
  };
IList<VariantFieldType>? buildListVariantFieldType(ListVariantFieldTypeContext? ctx) {
  if (ctx is ListVariantFieldType_EmptyContext) return buildListVariantFieldTypeEmpty(ctx);
  if (ctx is ListVariantFieldType_AppendLastContext) return buildListVariantFieldTypeAppendLast(ctx);
  if (ctx is ListVariantFieldType_PrependFirstContext) return buildListVariantFieldTypePrependFirst(ctx);
  return null;
}
IList<VariantFieldType>? buildListVariantFieldTypeEmpty(ListVariantFieldType_EmptyContext? ctx) =>
  IList();
IList<VariantFieldType>? buildListVariantFieldTypeAppendLast(ListVariantFieldType_AppendLastContext? ctx) =>
  switch ((
    buildVariantFieldType(ctx?.p_2_1),
  )) {
    (
      final variantFieldType?,
    ) =>
      IList([variantFieldType]),
    _ => null,
  };
IList<VariantFieldType>? buildListVariantFieldTypePrependFirst(ListVariantFieldType_PrependFirstContext? ctx) =>
  switch ((
    buildVariantFieldType(ctx?.p_3_1),
    buildListVariantFieldType(ctx?.p_3_3),
  )) {
    (
      final variantFieldType?,
      final variantFieldTypeList?,
    ) =>
      IList([variantFieldType, ...variantFieldTypeList,]),
    _ => null,
  };
RecordFieldType? buildRecordFieldType(RecordFieldTypeContext? ctx) {
  if (ctx is ARecordFieldTypeContext) return buildARecordFieldType(ctx);
  return null;
}
ARecordFieldType? buildARecordFieldType(ARecordFieldTypeContext? ctx) =>
  switch ((
    buildStellaIdent(ctx?.p_1_1),
    buildType(ctx?.p_1_3),
  )) {
    (
      final stellaIdent?,
      final stellaType?,
    ) =>
      ARecordFieldType(
        stellaIdent: stellaIdent,
        stellaType: stellaType,
      ),
    _ => null,
  };
IList<RecordFieldType>? buildListRecordFieldType(ListRecordFieldTypeContext? ctx) {
  if (ctx is ListRecordFieldType_AppendLastContext) return buildListRecordFieldTypeAppendLast(ctx);
  if (ctx is ListRecordFieldType_PrependFirstContext) return buildListRecordFieldTypePrependFirst(ctx);
  return null;
}
IList<RecordFieldType>? buildListRecordFieldTypeAppendLast(ListRecordFieldType_AppendLastContext? ctx) =>
  switch ((
    buildRecordFieldType(ctx?.p_1_1),
  )) {
    (
      final recordFieldType?,
    ) =>
      IList([recordFieldType]),
    _ => null,
  };
IList<RecordFieldType>? buildListRecordFieldTypePrependFirst(ListRecordFieldType_PrependFirstContext? ctx) =>
  switch ((
    buildRecordFieldType(ctx?.p_2_1),
    buildListRecordFieldType(ctx?.p_2_3),
  )) {
    (
      final recordFieldType?,
      final recordFieldTypeList?,
    ) =>
      IList([recordFieldType, ...recordFieldTypeList,]),
    _ => null,
  };
Typing? buildTyping(TypingContext? ctx) {
  if (ctx is ATypingContext) return buildATyping(ctx);
  return null;
}
ATyping? buildATyping(ATypingContext? ctx) =>
  switch ((
    buildExpr(ctx?.p_1_1),
    buildType(ctx?.p_1_3),
  )) {
    (
      final expr?,
      final stellaType?,
    ) =>
      ATyping(
        expr: expr,
        stellaType: stellaType,
      ),
    _ => null,
  };
