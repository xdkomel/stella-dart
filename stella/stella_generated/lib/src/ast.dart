// Dart File generated by the BNF Converter (bnfc 2.9.6).

import 'pretty_printer.dart' as pp;
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
typedef Character = String;
typedef StellaIdent = String;
typedef ExtensionName = String;
typedef MemoryAddress = String;
sealed class Program with pp.Printable {
  @override
  String get print => pp.printProgram(this);
}
class AProgram extends Program with pp.Printable {
  final LanguageDecl languageDecl;
  final IList<StellaExtension> stellaExtensionList;
  final IList<Decl> declList;
  AProgram({required this.languageDecl, required this.stellaExtensionList, required this.declList, });
  @override
  bool operator ==(Object o) =>
    o is AProgram &&
    o.runtimeType == runtimeType &&
    languageDecl == o.languageDecl &&
    stellaExtensionList == o.stellaExtensionList &&
    declList == o.declList;
  @override
  int get hashCode => Object.hashAll([languageDecl, stellaExtensionList, declList, ]);
  @override
  String get print => pp.printAProgram(this);
}

sealed class LanguageDecl with pp.Printable {
  @override
  String get print => pp.printLanguageDecl(this);
}
class LanguageCore extends LanguageDecl with pp.Printable {
  LanguageCore();
  @override
  bool operator ==(Object o) =>
    o is LanguageCore &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printLanguageCore(this);
}

sealed class StellaExtension with pp.Printable {
  @override
  String get print => pp.printStellaExtension(this);
}
class AnExtension extends StellaExtension with pp.Printable {
  final IList<ExtensionName> extensionNameList;
  AnExtension({required this.extensionNameList, });
  @override
  bool operator ==(Object o) =>
    o is AnExtension &&
    o.runtimeType == runtimeType &&
    extensionNameList == o.extensionNameList;
  @override
  int get hashCode => Object.hashAll([extensionNameList, ]);
  @override
  String get print => pp.printAnExtension(this);
}

sealed class Decl with pp.Printable {
  @override
  String get print => pp.printDecl(this);
}
class DeclFun extends Decl with pp.Printable {
  final IList<Annotation> annotationList;
  final StellaIdent stellaIdent;
  final IList<ParamDecl> paramDeclList;
  final ReturnType returnType;
  final ThrowType throwType;
  final IList<Decl> declList;
  final Expr expr;
  DeclFun({required this.annotationList, required this.stellaIdent, required this.paramDeclList, required this.returnType, required this.throwType, required this.declList, required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is DeclFun &&
    o.runtimeType == runtimeType &&
    annotationList == o.annotationList &&
    stellaIdent == o.stellaIdent &&
    paramDeclList == o.paramDeclList &&
    returnType == o.returnType &&
    throwType == o.throwType &&
    declList == o.declList &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([annotationList, stellaIdent, paramDeclList, returnType, throwType, declList, expr, ]);
  @override
  String get print => pp.printDeclFun(this);
}

class DeclFunGeneric extends Decl with pp.Printable {
  final IList<Annotation> annotationList;
  final StellaIdent stellaIdent;
  final IList<StellaIdent> stellaIdentList;
  final IList<ParamDecl> paramDeclList;
  final ReturnType returnType;
  final ThrowType throwType;
  final IList<Decl> declList;
  final Expr expr;
  DeclFunGeneric({required this.annotationList, required this.stellaIdent, required this.stellaIdentList, required this.paramDeclList, required this.returnType, required this.throwType, required this.declList, required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is DeclFunGeneric &&
    o.runtimeType == runtimeType &&
    annotationList == o.annotationList &&
    stellaIdent == o.stellaIdent &&
    stellaIdentList == o.stellaIdentList &&
    paramDeclList == o.paramDeclList &&
    returnType == o.returnType &&
    throwType == o.throwType &&
    declList == o.declList &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([annotationList, stellaIdent, stellaIdentList, paramDeclList, returnType, throwType, declList, expr, ]);
  @override
  String get print => pp.printDeclFunGeneric(this);
}

class DeclTypeAlias extends Decl with pp.Printable {
  final StellaIdent stellaIdent;
  final StellaType stellaType;
  DeclTypeAlias({required this.stellaIdent, required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is DeclTypeAlias &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([stellaIdent, stellaType, ]);
  @override
  String get print => pp.printDeclTypeAlias(this);
}

class DeclExceptionType extends Decl with pp.Printable {
  final StellaType stellaType;
  DeclExceptionType({required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is DeclExceptionType &&
    o.runtimeType == runtimeType &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([stellaType, ]);
  @override
  String get print => pp.printDeclExceptionType(this);
}

class DeclExceptionVariant extends Decl with pp.Printable {
  final StellaIdent stellaIdent;
  final StellaType stellaType;
  DeclExceptionVariant({required this.stellaIdent, required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is DeclExceptionVariant &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([stellaIdent, stellaType, ]);
  @override
  String get print => pp.printDeclExceptionVariant(this);
}

sealed class LocalDecl with pp.Printable {
  @override
  String get print => pp.printLocalDecl(this);
}
class ALocalDecl extends LocalDecl with pp.Printable {
  final Decl decl;
  ALocalDecl({required this.decl, });
  @override
  bool operator ==(Object o) =>
    o is ALocalDecl &&
    o.runtimeType == runtimeType &&
    decl == o.decl;
  @override
  int get hashCode => Object.hashAll([decl, ]);
  @override
  String get print => pp.printALocalDecl(this);
}

sealed class Annotation with pp.Printable {
  @override
  String get print => pp.printAnnotation(this);
}
class InlineAnnotation extends Annotation with pp.Printable {
  InlineAnnotation();
  @override
  bool operator ==(Object o) =>
    o is InlineAnnotation &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printInlineAnnotation(this);
}

sealed class ParamDecl with pp.Printable {
  @override
  String get print => pp.printParamDecl(this);
}
class AParamDecl extends ParamDecl with pp.Printable {
  final StellaIdent stellaIdent;
  final StellaType stellaType;
  AParamDecl({required this.stellaIdent, required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is AParamDecl &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([stellaIdent, stellaType, ]);
  @override
  String get print => pp.printAParamDecl(this);
}

sealed class ReturnType with pp.Printable {
  @override
  String get print => pp.printReturnType(this);
}
class NoReturnType extends ReturnType with pp.Printable {
  NoReturnType();
  @override
  bool operator ==(Object o) =>
    o is NoReturnType &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printNoReturnType(this);
}

class SomeReturnType extends ReturnType with pp.Printable {
  final StellaType stellaType;
  SomeReturnType({required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is SomeReturnType &&
    o.runtimeType == runtimeType &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([stellaType, ]);
  @override
  String get print => pp.printSomeReturnType(this);
}

sealed class ThrowType with pp.Printable {
  @override
  String get print => pp.printThrowType(this);
}
class NoThrowType extends ThrowType with pp.Printable {
  NoThrowType();
  @override
  bool operator ==(Object o) =>
    o is NoThrowType &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printNoThrowType(this);
}

class SomeThrowType extends ThrowType with pp.Printable {
  final IList<StellaType> stellaTypeList;
  SomeThrowType({required this.stellaTypeList, });
  @override
  bool operator ==(Object o) =>
    o is SomeThrowType &&
    o.runtimeType == runtimeType &&
    stellaTypeList == o.stellaTypeList;
  @override
  int get hashCode => Object.hashAll([stellaTypeList, ]);
  @override
  String get print => pp.printSomeThrowType(this);
}

sealed class StellaType with pp.Printable {
  @override
  String get print => pp.printStellaType(this);
}
class TypeFun extends StellaType with pp.Printable {
  final IList<StellaType> stellaTypeList;
  final StellaType stellaType;
  TypeFun({required this.stellaTypeList, required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is TypeFun &&
    o.runtimeType == runtimeType &&
    stellaTypeList == o.stellaTypeList &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([stellaTypeList, stellaType, ]);
  @override
  String get print => pp.printTypeFun(this);
}

class TypeForAll extends StellaType with pp.Printable {
  final IList<StellaIdent> stellaIdentList;
  final StellaType stellaType;
  TypeForAll({required this.stellaIdentList, required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is TypeForAll &&
    o.runtimeType == runtimeType &&
    stellaIdentList == o.stellaIdentList &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([stellaIdentList, stellaType, ]);
  @override
  String get print => pp.printTypeForAll(this);
}

class TypeRec extends StellaType with pp.Printable {
  final StellaIdent stellaIdent;
  final StellaType stellaType;
  TypeRec({required this.stellaIdent, required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is TypeRec &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([stellaIdent, stellaType, ]);
  @override
  String get print => pp.printTypeRec(this);
}

class TypeSum extends StellaType with pp.Printable {
  final StellaType stellaType1;
  final StellaType stellaType2;
  TypeSum({required this.stellaType1, required this.stellaType2, });
  @override
  bool operator ==(Object o) =>
    o is TypeSum &&
    o.runtimeType == runtimeType &&
    stellaType1 == o.stellaType1 &&
    stellaType2 == o.stellaType2;
  @override
  int get hashCode => Object.hashAll([stellaType1, stellaType2, ]);
  @override
  String get print => pp.printTypeSum(this);
}

class TypeTuple extends StellaType with pp.Printable {
  final IList<StellaType> stellaTypeList;
  TypeTuple({required this.stellaTypeList, });
  @override
  bool operator ==(Object o) =>
    o is TypeTuple &&
    o.runtimeType == runtimeType &&
    stellaTypeList == o.stellaTypeList;
  @override
  int get hashCode => Object.hashAll([stellaTypeList, ]);
  @override
  String get print => pp.printTypeTuple(this);
}

class TypeRecord extends StellaType with pp.Printable {
  final IList<RecordFieldType> recordFieldTypeList;
  TypeRecord({required this.recordFieldTypeList, });
  @override
  bool operator ==(Object o) =>
    o is TypeRecord &&
    o.runtimeType == runtimeType &&
    recordFieldTypeList == o.recordFieldTypeList;
  @override
  int get hashCode => Object.hashAll([recordFieldTypeList, ]);
  @override
  String get print => pp.printTypeRecord(this);
}

class TypeVariant extends StellaType with pp.Printable {
  final IList<VariantFieldType> variantFieldTypeList;
  TypeVariant({required this.variantFieldTypeList, });
  @override
  bool operator ==(Object o) =>
    o is TypeVariant &&
    o.runtimeType == runtimeType &&
    variantFieldTypeList == o.variantFieldTypeList;
  @override
  int get hashCode => Object.hashAll([variantFieldTypeList, ]);
  @override
  String get print => pp.printTypeVariant(this);
}

class TypeList extends StellaType with pp.Printable {
  final StellaType stellaType;
  TypeList({required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is TypeList &&
    o.runtimeType == runtimeType &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([stellaType, ]);
  @override
  String get print => pp.printTypeList(this);
}

class TypeBool extends StellaType with pp.Printable {
  TypeBool();
  @override
  bool operator ==(Object o) =>
    o is TypeBool &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printTypeBool(this);
}

class TypeNat extends StellaType with pp.Printable {
  TypeNat();
  @override
  bool operator ==(Object o) =>
    o is TypeNat &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printTypeNat(this);
}

class TypeUnit extends StellaType with pp.Printable {
  TypeUnit();
  @override
  bool operator ==(Object o) =>
    o is TypeUnit &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printTypeUnit(this);
}

class TypeTop extends StellaType with pp.Printable {
  TypeTop();
  @override
  bool operator ==(Object o) =>
    o is TypeTop &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printTypeTop(this);
}

class TypeBottom extends StellaType with pp.Printable {
  TypeBottom();
  @override
  bool operator ==(Object o) =>
    o is TypeBottom &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printTypeBottom(this);
}

class TypeRef extends StellaType with pp.Printable {
  final StellaType stellaType;
  TypeRef({required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is TypeRef &&
    o.runtimeType == runtimeType &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([stellaType, ]);
  @override
  String get print => pp.printTypeRef(this);
}

class TypeVar extends StellaType with pp.Printable {
  final StellaIdent stellaIdent;
  TypeVar({required this.stellaIdent, });
  @override
  bool operator ==(Object o) =>
    o is TypeVar &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent;
  @override
  int get hashCode => Object.hashAll([stellaIdent, ]);
  @override
  String get print => pp.printTypeVar(this);
}

sealed class MatchCase with pp.Printable {
  @override
  String get print => pp.printMatchCase(this);
}
class AMatchCase extends MatchCase with pp.Printable {
  final Pattern pattern;
  final Expr expr;
  AMatchCase({required this.pattern, required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is AMatchCase &&
    o.runtimeType == runtimeType &&
    pattern == o.pattern &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([pattern, expr, ]);
  @override
  String get print => pp.printAMatchCase(this);
}

sealed class OptionalTyping with pp.Printable {
  @override
  String get print => pp.printOptionalTyping(this);
}
class NoTyping extends OptionalTyping with pp.Printable {
  NoTyping();
  @override
  bool operator ==(Object o) =>
    o is NoTyping &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printNoTyping(this);
}

class SomeTyping extends OptionalTyping with pp.Printable {
  final StellaType stellaType;
  SomeTyping({required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is SomeTyping &&
    o.runtimeType == runtimeType &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([stellaType, ]);
  @override
  String get print => pp.printSomeTyping(this);
}

sealed class PatternData with pp.Printable {
  @override
  String get print => pp.printPatternData(this);
}
class NoPatternData extends PatternData with pp.Printable {
  NoPatternData();
  @override
  bool operator ==(Object o) =>
    o is NoPatternData &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printNoPatternData(this);
}

class SomePatternData extends PatternData with pp.Printable {
  final Pattern pattern;
  SomePatternData({required this.pattern, });
  @override
  bool operator ==(Object o) =>
    o is SomePatternData &&
    o.runtimeType == runtimeType &&
    pattern == o.pattern;
  @override
  int get hashCode => Object.hashAll([pattern, ]);
  @override
  String get print => pp.printSomePatternData(this);
}

sealed class ExprData with pp.Printable {
  @override
  String get print => pp.printExprData(this);
}
class NoExprData extends ExprData with pp.Printable {
  NoExprData();
  @override
  bool operator ==(Object o) =>
    o is NoExprData &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printNoExprData(this);
}

class SomeExprData extends ExprData with pp.Printable {
  final Expr expr;
  SomeExprData({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is SomeExprData &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printSomeExprData(this);
}

sealed class Pattern with pp.Printable {
  @override
  String get print => pp.printPattern(this);
}
class PatternVariant extends Pattern with pp.Printable {
  final StellaIdent stellaIdent;
  final PatternData patternData;
  PatternVariant({required this.stellaIdent, required this.patternData, });
  @override
  bool operator ==(Object o) =>
    o is PatternVariant &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent &&
    patternData == o.patternData;
  @override
  int get hashCode => Object.hashAll([stellaIdent, patternData, ]);
  @override
  String get print => pp.printPatternVariant(this);
}

class PatternInl extends Pattern with pp.Printable {
  final Pattern pattern;
  PatternInl({required this.pattern, });
  @override
  bool operator ==(Object o) =>
    o is PatternInl &&
    o.runtimeType == runtimeType &&
    pattern == o.pattern;
  @override
  int get hashCode => Object.hashAll([pattern, ]);
  @override
  String get print => pp.printPatternInl(this);
}

class PatternInr extends Pattern with pp.Printable {
  final Pattern pattern;
  PatternInr({required this.pattern, });
  @override
  bool operator ==(Object o) =>
    o is PatternInr &&
    o.runtimeType == runtimeType &&
    pattern == o.pattern;
  @override
  int get hashCode => Object.hashAll([pattern, ]);
  @override
  String get print => pp.printPatternInr(this);
}

class PatternTuple extends Pattern with pp.Printable {
  final IList<Pattern> patternList;
  PatternTuple({required this.patternList, });
  @override
  bool operator ==(Object o) =>
    o is PatternTuple &&
    o.runtimeType == runtimeType &&
    patternList == o.patternList;
  @override
  int get hashCode => Object.hashAll([patternList, ]);
  @override
  String get print => pp.printPatternTuple(this);
}

class PatternRecord extends Pattern with pp.Printable {
  final IList<LabelledPattern> labelledPatternList;
  PatternRecord({required this.labelledPatternList, });
  @override
  bool operator ==(Object o) =>
    o is PatternRecord &&
    o.runtimeType == runtimeType &&
    labelledPatternList == o.labelledPatternList;
  @override
  int get hashCode => Object.hashAll([labelledPatternList, ]);
  @override
  String get print => pp.printPatternRecord(this);
}

class PatternList extends Pattern with pp.Printable {
  final IList<Pattern> patternList;
  PatternList({required this.patternList, });
  @override
  bool operator ==(Object o) =>
    o is PatternList &&
    o.runtimeType == runtimeType &&
    patternList == o.patternList;
  @override
  int get hashCode => Object.hashAll([patternList, ]);
  @override
  String get print => pp.printPatternList(this);
}

class PatternCons extends Pattern with pp.Printable {
  final Pattern pattern1;
  final Pattern pattern2;
  PatternCons({required this.pattern1, required this.pattern2, });
  @override
  bool operator ==(Object o) =>
    o is PatternCons &&
    o.runtimeType == runtimeType &&
    pattern1 == o.pattern1 &&
    pattern2 == o.pattern2;
  @override
  int get hashCode => Object.hashAll([pattern1, pattern2, ]);
  @override
  String get print => pp.printPatternCons(this);
}

class PatternFalse extends Pattern with pp.Printable {
  PatternFalse();
  @override
  bool operator ==(Object o) =>
    o is PatternFalse &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printPatternFalse(this);
}

class PatternTrue extends Pattern with pp.Printable {
  PatternTrue();
  @override
  bool operator ==(Object o) =>
    o is PatternTrue &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printPatternTrue(this);
}

class PatternUnit extends Pattern with pp.Printable {
  PatternUnit();
  @override
  bool operator ==(Object o) =>
    o is PatternUnit &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printPatternUnit(this);
}

class PatternInt extends Pattern with pp.Printable {
  final int integer;
  PatternInt({required this.integer, });
  @override
  bool operator ==(Object o) =>
    o is PatternInt &&
    o.runtimeType == runtimeType &&
    integer == o.integer;
  @override
  int get hashCode => Object.hashAll([integer, ]);
  @override
  String get print => pp.printPatternInt(this);
}

class PatternSucc extends Pattern with pp.Printable {
  final Pattern pattern;
  PatternSucc({required this.pattern, });
  @override
  bool operator ==(Object o) =>
    o is PatternSucc &&
    o.runtimeType == runtimeType &&
    pattern == o.pattern;
  @override
  int get hashCode => Object.hashAll([pattern, ]);
  @override
  String get print => pp.printPatternSucc(this);
}

class PatternVar extends Pattern with pp.Printable {
  final StellaIdent stellaIdent;
  PatternVar({required this.stellaIdent, });
  @override
  bool operator ==(Object o) =>
    o is PatternVar &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent;
  @override
  int get hashCode => Object.hashAll([stellaIdent, ]);
  @override
  String get print => pp.printPatternVar(this);
}

sealed class LabelledPattern with pp.Printable {
  @override
  String get print => pp.printLabelledPattern(this);
}
class ALabelledPattern extends LabelledPattern with pp.Printable {
  final StellaIdent stellaIdent;
  final Pattern pattern;
  ALabelledPattern({required this.stellaIdent, required this.pattern, });
  @override
  bool operator ==(Object o) =>
    o is ALabelledPattern &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent &&
    pattern == o.pattern;
  @override
  int get hashCode => Object.hashAll([stellaIdent, pattern, ]);
  @override
  String get print => pp.printALabelledPattern(this);
}

sealed class Binding with pp.Printable {
  @override
  String get print => pp.printBinding(this);
}
class ABinding extends Binding with pp.Printable {
  final StellaIdent stellaIdent;
  final Expr expr;
  ABinding({required this.stellaIdent, required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is ABinding &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([stellaIdent, expr, ]);
  @override
  String get print => pp.printABinding(this);
}

sealed class Expr with pp.Printable {
  @override
  String get print => pp.printExpr(this);
}
class Sequence extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  Sequence({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is Sequence &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printSequence(this);
}

class Assign extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  Assign({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is Assign &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printAssign(this);
}

class StellaIf extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  final Expr expr3;
  StellaIf({required this.expr1, required this.expr2, required this.expr3, });
  @override
  bool operator ==(Object o) =>
    o is StellaIf &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2 &&
    expr3 == o.expr3;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, expr3, ]);
  @override
  String get print => pp.printStellaIf(this);
}

class Let extends Expr with pp.Printable {
  final IList<PatternBinding> patternBindingList;
  final Expr expr;
  Let({required this.patternBindingList, required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Let &&
    o.runtimeType == runtimeType &&
    patternBindingList == o.patternBindingList &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([patternBindingList, expr, ]);
  @override
  String get print => pp.printLet(this);
}

class LetRec extends Expr with pp.Printable {
  final IList<PatternBinding> patternBindingList;
  final Expr expr;
  LetRec({required this.patternBindingList, required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is LetRec &&
    o.runtimeType == runtimeType &&
    patternBindingList == o.patternBindingList &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([patternBindingList, expr, ]);
  @override
  String get print => pp.printLetRec(this);
}

class TypeAbstraction extends Expr with pp.Printable {
  final IList<StellaIdent> stellaIdentList;
  final Expr expr;
  TypeAbstraction({required this.stellaIdentList, required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is TypeAbstraction &&
    o.runtimeType == runtimeType &&
    stellaIdentList == o.stellaIdentList &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([stellaIdentList, expr, ]);
  @override
  String get print => pp.printTypeAbstraction(this);
}

class LessThan extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  LessThan({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is LessThan &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printLessThan(this);
}

class LessThanOrEqual extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  LessThanOrEqual({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is LessThanOrEqual &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printLessThanOrEqual(this);
}

class GreaterThan extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  GreaterThan({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is GreaterThan &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printGreaterThan(this);
}

class GreaterThanOrEqual extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  GreaterThanOrEqual({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is GreaterThanOrEqual &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printGreaterThanOrEqual(this);
}

class Equal extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  Equal({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is Equal &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printEqual(this);
}

class NotEqual extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  NotEqual({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is NotEqual &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printNotEqual(this);
}

class TypeAsc extends Expr with pp.Printable {
  final Expr expr;
  final StellaType stellaType;
  TypeAsc({required this.expr, required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is TypeAsc &&
    o.runtimeType == runtimeType &&
    expr == o.expr &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([expr, stellaType, ]);
  @override
  String get print => pp.printTypeAsc(this);
}

class TypeCast extends Expr with pp.Printable {
  final Expr expr;
  final StellaType stellaType;
  TypeCast({required this.expr, required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is TypeCast &&
    o.runtimeType == runtimeType &&
    expr == o.expr &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([expr, stellaType, ]);
  @override
  String get print => pp.printTypeCast(this);
}

class Abstraction extends Expr with pp.Printable {
  final IList<ParamDecl> paramDeclList;
  final Expr expr;
  Abstraction({required this.paramDeclList, required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Abstraction &&
    o.runtimeType == runtimeType &&
    paramDeclList == o.paramDeclList &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([paramDeclList, expr, ]);
  @override
  String get print => pp.printAbstraction(this);
}

class Variant extends Expr with pp.Printable {
  final StellaIdent stellaIdent;
  final ExprData exprData;
  Variant({required this.stellaIdent, required this.exprData, });
  @override
  bool operator ==(Object o) =>
    o is Variant &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent &&
    exprData == o.exprData;
  @override
  int get hashCode => Object.hashAll([stellaIdent, exprData, ]);
  @override
  String get print => pp.printVariant(this);
}

class Match extends Expr with pp.Printable {
  final Expr expr;
  final IList<MatchCase> matchCaseList;
  Match({required this.expr, required this.matchCaseList, });
  @override
  bool operator ==(Object o) =>
    o is Match &&
    o.runtimeType == runtimeType &&
    expr == o.expr &&
    matchCaseList == o.matchCaseList;
  @override
  int get hashCode => Object.hashAll([expr, matchCaseList, ]);
  @override
  String get print => pp.printMatch(this);
}

class StellaList extends Expr with pp.Printable {
  final IList<Expr> exprList;
  StellaList({required this.exprList, });
  @override
  bool operator ==(Object o) =>
    o is StellaList &&
    o.runtimeType == runtimeType &&
    exprList == o.exprList;
  @override
  int get hashCode => Object.hashAll([exprList, ]);
  @override
  String get print => pp.printStellaList(this);
}

class Add extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  Add({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is Add &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printAdd(this);
}

class Subtract extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  Subtract({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is Subtract &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printSubtract(this);
}

class LogicOr extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  LogicOr({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is LogicOr &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printLogicOr(this);
}

class Multiply extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  Multiply({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is Multiply &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printMultiply(this);
}

class Divide extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  Divide({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is Divide &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printDivide(this);
}

class LogicAnd extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  LogicAnd({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is LogicAnd &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printLogicAnd(this);
}

class Ref extends Expr with pp.Printable {
  final Expr expr;
  Ref({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Ref &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printRef(this);
}

class Deref extends Expr with pp.Printable {
  final Expr expr;
  Deref({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Deref &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printDeref(this);
}

class Application extends Expr with pp.Printable {
  final Expr expr;
  final IList<Expr> exprList;
  Application({required this.expr, required this.exprList, });
  @override
  bool operator ==(Object o) =>
    o is Application &&
    o.runtimeType == runtimeType &&
    expr == o.expr &&
    exprList == o.exprList;
  @override
  int get hashCode => Object.hashAll([expr, exprList, ]);
  @override
  String get print => pp.printApplication(this);
}

class TypeApplication extends Expr with pp.Printable {
  final Expr expr;
  final IList<StellaType> stellaTypeList;
  TypeApplication({required this.expr, required this.stellaTypeList, });
  @override
  bool operator ==(Object o) =>
    o is TypeApplication &&
    o.runtimeType == runtimeType &&
    expr == o.expr &&
    stellaTypeList == o.stellaTypeList;
  @override
  int get hashCode => Object.hashAll([expr, stellaTypeList, ]);
  @override
  String get print => pp.printTypeApplication(this);
}

class DotRecord extends Expr with pp.Printable {
  final Expr expr;
  final StellaIdent stellaIdent;
  DotRecord({required this.expr, required this.stellaIdent, });
  @override
  bool operator ==(Object o) =>
    o is DotRecord &&
    o.runtimeType == runtimeType &&
    expr == o.expr &&
    stellaIdent == o.stellaIdent;
  @override
  int get hashCode => Object.hashAll([expr, stellaIdent, ]);
  @override
  String get print => pp.printDotRecord(this);
}

class DotTuple extends Expr with pp.Printable {
  final Expr expr;
  final int integer;
  DotTuple({required this.expr, required this.integer, });
  @override
  bool operator ==(Object o) =>
    o is DotTuple &&
    o.runtimeType == runtimeType &&
    expr == o.expr &&
    integer == o.integer;
  @override
  int get hashCode => Object.hashAll([expr, integer, ]);
  @override
  String get print => pp.printDotTuple(this);
}

class Tuple extends Expr with pp.Printable {
  final IList<Expr> exprList;
  Tuple({required this.exprList, });
  @override
  bool operator ==(Object o) =>
    o is Tuple &&
    o.runtimeType == runtimeType &&
    exprList == o.exprList;
  @override
  int get hashCode => Object.hashAll([exprList, ]);
  @override
  String get print => pp.printTuple(this);
}

class Record extends Expr with pp.Printable {
  final IList<Binding> bindingList;
  Record({required this.bindingList, });
  @override
  bool operator ==(Object o) =>
    o is Record &&
    o.runtimeType == runtimeType &&
    bindingList == o.bindingList;
  @override
  int get hashCode => Object.hashAll([bindingList, ]);
  @override
  String get print => pp.printRecord(this);
}

class ConsList extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  ConsList({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is ConsList &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printConsList(this);
}

class Head extends Expr with pp.Printable {
  final Expr expr;
  Head({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Head &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printHead(this);
}

class IsEmpty extends Expr with pp.Printable {
  final Expr expr;
  IsEmpty({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is IsEmpty &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printIsEmpty(this);
}

class Tail extends Expr with pp.Printable {
  final Expr expr;
  Tail({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Tail &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printTail(this);
}

class Panic extends Expr with pp.Printable {
  Panic();
  @override
  bool operator ==(Object o) =>
    o is Panic &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printPanic(this);
}

class StellaThrow extends Expr with pp.Printable {
  final Expr expr;
  StellaThrow({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is StellaThrow &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printStellaThrow(this);
}

class TryCatch extends Expr with pp.Printable {
  final Expr expr1;
  final Pattern pattern;
  final Expr expr2;
  TryCatch({required this.expr1, required this.pattern, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is TryCatch &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    pattern == o.pattern &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, pattern, expr2, ]);
  @override
  String get print => pp.printTryCatch(this);
}

class TryWith extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  TryWith({required this.expr1, required this.expr2, });
  @override
  bool operator ==(Object o) =>
    o is TryWith &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, ]);
  @override
  String get print => pp.printTryWith(this);
}

class Inl extends Expr with pp.Printable {
  final Expr expr;
  Inl({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Inl &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printInl(this);
}

class Inr extends Expr with pp.Printable {
  final Expr expr;
  Inr({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Inr &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printInr(this);
}

class Succ extends Expr with pp.Printable {
  final Expr expr;
  Succ({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Succ &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printSucc(this);
}

class LogicNot extends Expr with pp.Printable {
  final Expr expr;
  LogicNot({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is LogicNot &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printLogicNot(this);
}

class Pred extends Expr with pp.Printable {
  final Expr expr;
  Pred({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Pred &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printPred(this);
}

class IsZero extends Expr with pp.Printable {
  final Expr expr;
  IsZero({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is IsZero &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printIsZero(this);
}

class Fix extends Expr with pp.Printable {
  final Expr expr;
  Fix({required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Fix &&
    o.runtimeType == runtimeType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([expr, ]);
  @override
  String get print => pp.printFix(this);
}

class NatRec extends Expr with pp.Printable {
  final Expr expr1;
  final Expr expr2;
  final Expr expr3;
  NatRec({required this.expr1, required this.expr2, required this.expr3, });
  @override
  bool operator ==(Object o) =>
    o is NatRec &&
    o.runtimeType == runtimeType &&
    expr1 == o.expr1 &&
    expr2 == o.expr2 &&
    expr3 == o.expr3;
  @override
  int get hashCode => Object.hashAll([expr1, expr2, expr3, ]);
  @override
  String get print => pp.printNatRec(this);
}

class Fold extends Expr with pp.Printable {
  final StellaType stellaType;
  final Expr expr;
  Fold({required this.stellaType, required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Fold &&
    o.runtimeType == runtimeType &&
    stellaType == o.stellaType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([stellaType, expr, ]);
  @override
  String get print => pp.printFold(this);
}

class Unfold extends Expr with pp.Printable {
  final StellaType stellaType;
  final Expr expr;
  Unfold({required this.stellaType, required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is Unfold &&
    o.runtimeType == runtimeType &&
    stellaType == o.stellaType &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([stellaType, expr, ]);
  @override
  String get print => pp.printUnfold(this);
}

class ConstTrue extends Expr with pp.Printable {
  ConstTrue();
  @override
  bool operator ==(Object o) =>
    o is ConstTrue &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printConstTrue(this);
}

class ConstFalse extends Expr with pp.Printable {
  ConstFalse();
  @override
  bool operator ==(Object o) =>
    o is ConstFalse &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printConstFalse(this);
}

class ConstUnit extends Expr with pp.Printable {
  ConstUnit();
  @override
  bool operator ==(Object o) =>
    o is ConstUnit &&
    o.runtimeType == runtimeType;
  @override
  int get hashCode => Object.hashAll([]);
  @override
  String get print => pp.printConstUnit(this);
}

class ConstInt extends Expr with pp.Printable {
  final int integer;
  ConstInt({required this.integer, });
  @override
  bool operator ==(Object o) =>
    o is ConstInt &&
    o.runtimeType == runtimeType &&
    integer == o.integer;
  @override
  int get hashCode => Object.hashAll([integer, ]);
  @override
  String get print => pp.printConstInt(this);
}

class ConstDouble extends Expr with pp.Printable {
  final double stellaDouble;
  ConstDouble({required this.stellaDouble, });
  @override
  bool operator ==(Object o) =>
    o is ConstDouble &&
    o.runtimeType == runtimeType &&
    stellaDouble == o.stellaDouble;
  @override
  int get hashCode => Object.hashAll([stellaDouble, ]);
  @override
  String get print => pp.printConstDouble(this);
}

class ConstMemory extends Expr with pp.Printable {
  final MemoryAddress memoryAddress;
  ConstMemory({required this.memoryAddress, });
  @override
  bool operator ==(Object o) =>
    o is ConstMemory &&
    o.runtimeType == runtimeType &&
    memoryAddress == o.memoryAddress;
  @override
  int get hashCode => Object.hashAll([memoryAddress, ]);
  @override
  String get print => pp.printConstMemory(this);
}

class StellaVar extends Expr with pp.Printable {
  final StellaIdent stellaIdent;
  StellaVar({required this.stellaIdent, });
  @override
  bool operator ==(Object o) =>
    o is StellaVar &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent;
  @override
  int get hashCode => Object.hashAll([stellaIdent, ]);
  @override
  String get print => pp.printStellaVar(this);
}

sealed class PatternBinding with pp.Printable {
  @override
  String get print => pp.printPatternBinding(this);
}
class APatternBinding extends PatternBinding with pp.Printable {
  final Pattern pattern;
  final Expr expr;
  APatternBinding({required this.pattern, required this.expr, });
  @override
  bool operator ==(Object o) =>
    o is APatternBinding &&
    o.runtimeType == runtimeType &&
    pattern == o.pattern &&
    expr == o.expr;
  @override
  int get hashCode => Object.hashAll([pattern, expr, ]);
  @override
  String get print => pp.printAPatternBinding(this);
}

sealed class VariantFieldType with pp.Printable {
  @override
  String get print => pp.printVariantFieldType(this);
}
class AVariantFieldType extends VariantFieldType with pp.Printable {
  final StellaIdent stellaIdent;
  final OptionalTyping optionalTyping;
  AVariantFieldType({required this.stellaIdent, required this.optionalTyping, });
  @override
  bool operator ==(Object o) =>
    o is AVariantFieldType &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent &&
    optionalTyping == o.optionalTyping;
  @override
  int get hashCode => Object.hashAll([stellaIdent, optionalTyping, ]);
  @override
  String get print => pp.printAVariantFieldType(this);
}

sealed class RecordFieldType with pp.Printable {
  @override
  String get print => pp.printRecordFieldType(this);
}
class ARecordFieldType extends RecordFieldType with pp.Printable {
  final StellaIdent stellaIdent;
  final StellaType stellaType;
  ARecordFieldType({required this.stellaIdent, required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is ARecordFieldType &&
    o.runtimeType == runtimeType &&
    stellaIdent == o.stellaIdent &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([stellaIdent, stellaType, ]);
  @override
  String get print => pp.printARecordFieldType(this);
}

sealed class Typing with pp.Printable {
  @override
  String get print => pp.printTyping(this);
}
class ATyping extends Typing with pp.Printable {
  final Expr expr;
  final StellaType stellaType;
  ATyping({required this.expr, required this.stellaType, });
  @override
  bool operator ==(Object o) =>
    o is ATyping &&
    o.runtimeType == runtimeType &&
    expr == o.expr &&
    stellaType == o.stellaType;
  @override
  int get hashCode => Object.hashAll([expr, stellaType, ]);
  @override
  String get print => pp.printATyping(this);
}

