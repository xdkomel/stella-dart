// Dart File generated by the BNF Converter (bnfc 2.9.6).

import 'ast.dart' as ast;
import 'package:fast_immutable_collections/fast_immutable_collections.dart';
sealed class Token {}

class Space extends Token {}

class NewLine extends Token {
  int indentDifference;
  NewLine.indent(this.indentDifference);
  NewLine() : indentDifference = 0;
  NewLine.nest() : indentDifference = 1;
  NewLine.unnest() : indentDifference = -1;
}

class Text extends Token {
  String text;
  Text(this.text);
}
class StringRenderer {
  // Change this value if you want to change the indentation length
  static const _indentInSpaces = 2;

  String print(Iterable<String> tokens) => tokens
      .map((element) => element.trim())
      .fold(IList<Token>(), _render)
      .fold(IList<(int, IList<Token>)>(), _split)
      .map((line) => (line.$1, line.$2.map(_tokenToString).join()))
      .fold(IList<(int, String)>(), _convertIndentation)
      .map(_addIndentation)
      .join('\n');

  IList<(int, IList<Token>)> _split(
    IList<(int, IList<Token>)> lists,
    Token token,
  ) =>
      switch (token) {
        NewLine nl => lists.add((
            nl.indentDifference,
            IList(),
          )),
        _ => lists.isEmpty
            ? IList([
                (0, IList([token]))
              ])
            : lists.put(
                lists.length - 1,
                (lists.last.$1, lists.last.$2.add(token)),
              ),
      };

  String _tokenToString(Token t) => switch (t) {
        Text t => t.text,
        Space _ => ' ',
        _ => '',
      };

  IList<(int, String)> _convertIndentation(
    IList<(int, String)> lines,
    (int, String) line,
  ) =>
      lines.add((
        line.$1 + (lines.lastOrNull?.$1 ?? 0),
        line.$2,
      ));

  String _addIndentation((int, String) indentedLine) =>
      ' ' * (_indentInSpaces * indentedLine.$1) + indentedLine.$2;

  // This function is supposed to be edited
  // in order to adjust the pretty printer behavior
  IList<Token> _render(IList<Token> tokens, String token) => switch (token) {
        '' || ' ' => tokens,
        '{' => tokens.addAll([Text(token), NewLine.nest()]),
        '}' => tokens.removeTrailingLines
            .addAll([NewLine.unnest(), Text(token), NewLine()]),
        ';' => tokens.removeTrailingSpaces.addAll([Text(token), NewLine()]),
        ')' || ']' || '>' || ',' => tokens
            .removeTrailingSpaces.removeTrailingLines
            .addAll([Text(token), Space()]),
        '\$' ||
        '&' ||
        '@' ||
        '!' ||
        '#' ||
        '(' ||
        '[' ||
        '<' ||
        '.' =>
          tokens.removeTrailingLines.add(Text(token)),
        _ => tokens.addAll([Text(token), Space()])
      };
}

extension TokensList on IList<Token> {
  IList<Token> get removeTrailingLines =>
      isNotEmpty && last is NewLine ? removeLast().removeTrailingLines : this;
  IList<Token> get removeTrailingSpaces =>
      isNotEmpty && last is Space ? removeLast().removeTrailingSpaces : this;
}

extension PrintableInt on int {
  String get print => toString();
}

extension PrintableDouble on double {
  String get print => toString();
}

extension PrintableString on String {
  String get print => this;
}

extension PrintableIList on IList {
  String get print => toString();
}

final _renderer = StringRenderer();

mixin Printable {
  String get print => '[not implemented]';
}
Iterable<String> _prettifyStellaIdent(ast.StellaIdent x) => [x];
Iterable<String> _prettifyExtensionName(ast.ExtensionName x) => [x];
Iterable<String> _prettifyMemoryAddress(ast.MemoryAddress x) => [x];
Iterable<String> _prettifyProgram(ast.Program a) => switch (a) {
    ast.AProgram a => _prettifyAProgram(a),
  };
String printProgram(ast.Program x) => _renderer.print(_prettifyProgram(x));
Iterable<String> _prettifyLanguageDecl(ast.LanguageDecl a) => switch (a) {
    ast.LanguageCore a => _prettifyLanguageCore(a),
  };
String printLanguageDecl(ast.LanguageDecl x) => _renderer.print(_prettifyLanguageDecl(x));
Iterable<String> _prettifyStellaExtension(ast.StellaExtension a) => switch (a) {
    ast.AnExtension a => _prettifyAnExtension(a),
  };
String printStellaExtension(ast.StellaExtension x) => _renderer.print(_prettifyStellaExtension(x));
Iterable<String> _prettifyDecl(ast.Decl a) => switch (a) {
    ast.DeclFun a => _prettifyDeclFun(a),
    ast.DeclFunGeneric a => _prettifyDeclFunGeneric(a),
    ast.DeclTypeAlias a => _prettifyDeclTypeAlias(a),
    ast.DeclExceptionType a => _prettifyDeclExceptionType(a),
    ast.DeclExceptionVariant a => _prettifyDeclExceptionVariant(a),
  };
String printDecl(ast.Decl x) => _renderer.print(_prettifyDecl(x));
Iterable<String> _prettifyLocalDecl(ast.LocalDecl a) => switch (a) {
    ast.ALocalDecl a => _prettifyALocalDecl(a),
  };
String printLocalDecl(ast.LocalDecl x) => _renderer.print(_prettifyLocalDecl(x));
Iterable<String> _prettifyAnnotation(ast.Annotation a) => switch (a) {
    ast.InlineAnnotation a => _prettifyInlineAnnotation(a),
  };
String printAnnotation(ast.Annotation x) => _renderer.print(_prettifyAnnotation(x));
Iterable<String> _prettifyParamDecl(ast.ParamDecl a) => switch (a) {
    ast.AParamDecl a => _prettifyAParamDecl(a),
  };
String printParamDecl(ast.ParamDecl x) => _renderer.print(_prettifyParamDecl(x));
Iterable<String> _prettifyReturnType(ast.ReturnType a) => switch (a) {
    ast.NoReturnType a => _prettifyNoReturnType(a),
    ast.SomeReturnType a => _prettifySomeReturnType(a),
  };
String printReturnType(ast.ReturnType x) => _renderer.print(_prettifyReturnType(x));
Iterable<String> _prettifyThrowType(ast.ThrowType a) => switch (a) {
    ast.NoThrowType a => _prettifyNoThrowType(a),
    ast.SomeThrowType a => _prettifySomeThrowType(a),
  };
String printThrowType(ast.ThrowType x) => _renderer.print(_prettifyThrowType(x));
Iterable<String> _prettifyStellaType(ast.StellaType a) => switch (a) {
    ast.TypeFun a => _prettifyTypeFun(a),
    ast.TypeForAll a => _prettifyTypeForAll(a),
    ast.TypeRec a => _prettifyTypeRec(a),
    ast.TypeSum a => _prettifyTypeSum(a),
    ast.TypeTuple a => _prettifyTypeTuple(a),
    ast.TypeRecord a => _prettifyTypeRecord(a),
    ast.TypeVariant a => _prettifyTypeVariant(a),
    ast.TypeList a => _prettifyTypeList(a),
    ast.TypeBool a => _prettifyTypeBool(a),
    ast.TypeNat a => _prettifyTypeNat(a),
    ast.TypeUnit a => _prettifyTypeUnit(a),
    ast.TypeTop a => _prettifyTypeTop(a),
    ast.TypeBottom a => _prettifyTypeBottom(a),
    ast.TypeRef a => _prettifyTypeRef(a),
    ast.TypeVar a => _prettifyTypeVar(a),
  };
String printStellaType(ast.StellaType x) => _renderer.print(_prettifyStellaType(x));
Iterable<String> _prettifyMatchCase(ast.MatchCase a) => switch (a) {
    ast.AMatchCase a => _prettifyAMatchCase(a),
  };
String printMatchCase(ast.MatchCase x) => _renderer.print(_prettifyMatchCase(x));
Iterable<String> _prettifyOptionalTyping(ast.OptionalTyping a) => switch (a) {
    ast.NoTyping a => _prettifyNoTyping(a),
    ast.SomeTyping a => _prettifySomeTyping(a),
  };
String printOptionalTyping(ast.OptionalTyping x) => _renderer.print(_prettifyOptionalTyping(x));
Iterable<String> _prettifyPatternData(ast.PatternData a) => switch (a) {
    ast.NoPatternData a => _prettifyNoPatternData(a),
    ast.SomePatternData a => _prettifySomePatternData(a),
  };
String printPatternData(ast.PatternData x) => _renderer.print(_prettifyPatternData(x));
Iterable<String> _prettifyExprData(ast.ExprData a) => switch (a) {
    ast.NoExprData a => _prettifyNoExprData(a),
    ast.SomeExprData a => _prettifySomeExprData(a),
  };
String printExprData(ast.ExprData x) => _renderer.print(_prettifyExprData(x));
Iterable<String> _prettifyPattern(ast.Pattern a) => switch (a) {
    ast.PatternVariant a => _prettifyPatternVariant(a),
    ast.PatternInl a => _prettifyPatternInl(a),
    ast.PatternInr a => _prettifyPatternInr(a),
    ast.PatternTuple a => _prettifyPatternTuple(a),
    ast.PatternRecord a => _prettifyPatternRecord(a),
    ast.PatternList a => _prettifyPatternList(a),
    ast.PatternCons a => _prettifyPatternCons(a),
    ast.PatternFalse a => _prettifyPatternFalse(a),
    ast.PatternTrue a => _prettifyPatternTrue(a),
    ast.PatternUnit a => _prettifyPatternUnit(a),
    ast.PatternInt a => _prettifyPatternInt(a),
    ast.PatternSucc a => _prettifyPatternSucc(a),
    ast.PatternVar a => _prettifyPatternVar(a),
  };
String printPattern(ast.Pattern x) => _renderer.print(_prettifyPattern(x));
Iterable<String> _prettifyLabelledPattern(ast.LabelledPattern a) => switch (a) {
    ast.ALabelledPattern a => _prettifyALabelledPattern(a),
  };
String printLabelledPattern(ast.LabelledPattern x) => _renderer.print(_prettifyLabelledPattern(x));
Iterable<String> _prettifyBinding(ast.Binding a) => switch (a) {
    ast.ABinding a => _prettifyABinding(a),
  };
String printBinding(ast.Binding x) => _renderer.print(_prettifyBinding(x));
Iterable<String> _prettifyExpr(ast.Expr a) => switch (a) {
    ast.Sequence a => _prettifySequence(a),
    ast.Assign a => _prettifyAssign(a),
    ast.StellaIf a => _prettifyStellaIf(a),
    ast.Let a => _prettifyLet(a),
    ast.LetRec a => _prettifyLetRec(a),
    ast.TypeAbstraction a => _prettifyTypeAbstraction(a),
    ast.LessThan a => _prettifyLessThan(a),
    ast.LessThanOrEqual a => _prettifyLessThanOrEqual(a),
    ast.GreaterThan a => _prettifyGreaterThan(a),
    ast.GreaterThanOrEqual a => _prettifyGreaterThanOrEqual(a),
    ast.Equal a => _prettifyEqual(a),
    ast.NotEqual a => _prettifyNotEqual(a),
    ast.TypeAsc a => _prettifyTypeAsc(a),
    ast.TypeCast a => _prettifyTypeCast(a),
    ast.Abstraction a => _prettifyAbstraction(a),
    ast.Variant a => _prettifyVariant(a),
    ast.Match a => _prettifyMatch(a),
    ast.StellaList a => _prettifyStellaList(a),
    ast.Add a => _prettifyAdd(a),
    ast.Subtract a => _prettifySubtract(a),
    ast.LogicOr a => _prettifyLogicOr(a),
    ast.Multiply a => _prettifyMultiply(a),
    ast.Divide a => _prettifyDivide(a),
    ast.LogicAnd a => _prettifyLogicAnd(a),
    ast.Ref a => _prettifyRef(a),
    ast.Deref a => _prettifyDeref(a),
    ast.Application a => _prettifyApplication(a),
    ast.TypeApplication a => _prettifyTypeApplication(a),
    ast.DotRecord a => _prettifyDotRecord(a),
    ast.DotTuple a => _prettifyDotTuple(a),
    ast.Tuple a => _prettifyTuple(a),
    ast.Record a => _prettifyRecord(a),
    ast.ConsList a => _prettifyConsList(a),
    ast.Head a => _prettifyHead(a),
    ast.IsEmpty a => _prettifyIsEmpty(a),
    ast.Tail a => _prettifyTail(a),
    ast.Panic a => _prettifyPanic(a),
    ast.StellaThrow a => _prettifyStellaThrow(a),
    ast.TryCatch a => _prettifyTryCatch(a),
    ast.TryWith a => _prettifyTryWith(a),
    ast.Inl a => _prettifyInl(a),
    ast.Inr a => _prettifyInr(a),
    ast.Succ a => _prettifySucc(a),
    ast.LogicNot a => _prettifyLogicNot(a),
    ast.Pred a => _prettifyPred(a),
    ast.IsZero a => _prettifyIsZero(a),
    ast.Fix a => _prettifyFix(a),
    ast.NatRec a => _prettifyNatRec(a),
    ast.Fold a => _prettifyFold(a),
    ast.Unfold a => _prettifyUnfold(a),
    ast.ConstTrue a => _prettifyConstTrue(a),
    ast.ConstFalse a => _prettifyConstFalse(a),
    ast.ConstUnit a => _prettifyConstUnit(a),
    ast.ConstInt a => _prettifyConstInt(a),
    ast.ConstDouble a => _prettifyConstDouble(a),
    ast.ConstMemory a => _prettifyConstMemory(a),
    ast.StellaVar a => _prettifyStellaVar(a),
  };
String printExpr(ast.Expr x) => _renderer.print(_prettifyExpr(x));
Iterable<String> _prettifyPatternBinding(ast.PatternBinding a) => switch (a) {
    ast.APatternBinding a => _prettifyAPatternBinding(a),
  };
String printPatternBinding(ast.PatternBinding x) => _renderer.print(_prettifyPatternBinding(x));
Iterable<String> _prettifyVariantFieldType(ast.VariantFieldType a) => switch (a) {
    ast.AVariantFieldType a => _prettifyAVariantFieldType(a),
  };
String printVariantFieldType(ast.VariantFieldType x) => _renderer.print(_prettifyVariantFieldType(x));
Iterable<String> _prettifyRecordFieldType(ast.RecordFieldType a) => switch (a) {
    ast.ARecordFieldType a => _prettifyARecordFieldType(a),
  };
String printRecordFieldType(ast.RecordFieldType x) => _renderer.print(_prettifyRecordFieldType(x));
Iterable<String> _prettifyTyping(ast.Typing a) => switch (a) {
    ast.ATyping a => _prettifyATyping(a),
  };
String printTyping(ast.Typing x) => _renderer.print(_prettifyTyping(x));
Iterable<String> _prettifyAProgram(ast.AProgram a) => [
  ..._prettifyLanguageDecl(a.languageDecl),
  ..._prettifyListStellaExtension(a.stellaExtensionList),
  ..._prettifyListDecl(a.declList),
];

String printAProgram(ast.AProgram x) => _renderer.print(_prettifyAProgram(x));
Iterable<String> _prettifyListStellaIdent(Iterable<ast.StellaIdent> a) => [...a.expand((e1) => [',', ..._prettifyStellaIdent(e1)],).skip(1), '',];
String printListStellaIdent(Iterable<ast.StellaIdent> x) => _renderer.print(_prettifyListStellaIdent(x));
Iterable<String> _prettifyLanguageCore(ast.LanguageCore a) => [
  'language',
  'core',
  ';',
];

String printLanguageCore(ast.LanguageCore x) => _renderer.print(_prettifyLanguageCore(x));
Iterable<String> _prettifyAnExtension(ast.AnExtension a) => [
  'extend',
  'with',
  ..._prettifyListExtensionName(a.extensionNameList),
];

String printAnExtension(ast.AnExtension x) => _renderer.print(_prettifyAnExtension(x));
Iterable<String> _prettifyListExtensionName(Iterable<ast.ExtensionName> a) => [...a.expand((e1) => [',', ..._prettifyExtensionName(e1)],).skip(1), '',];
String printListExtensionName(Iterable<ast.ExtensionName> x) => _renderer.print(_prettifyListExtensionName(x));
Iterable<String> _prettifyListStellaExtension(Iterable<ast.StellaExtension> a) => [...a.expand((e1) => [';', ..._prettifyStellaExtension(e1)],).skip(1), '',];
String printListStellaExtension(Iterable<ast.StellaExtension> x) => _renderer.print(_prettifyListStellaExtension(x));
Iterable<String> _prettifyDeclFun(ast.DeclFun a) => [
  ..._prettifyListAnnotation(a.annotationList),
  'fn',
  ..._prettifyStellaIdent(a.stellaIdent),
  '(',
  ..._prettifyListParamDecl(a.paramDeclList),
  ')',
  ..._prettifyReturnType(a.returnType),
  ..._prettifyThrowType(a.throwType),
  '{',
  ..._prettifyListDecl(a.declList),
  'return',
  ..._prettifyExpr(a.expr),
  '}',
];

Iterable<String> _prettifyDeclFunGeneric(ast.DeclFunGeneric a) => [
  ..._prettifyListAnnotation(a.annotationList),
  'generic',
  'fn',
  ..._prettifyStellaIdent(a.stellaIdent),
  '[',
  ..._prettifyListStellaIdent(a.stellaIdentList),
  ']',
  '(',
  ..._prettifyListParamDecl(a.paramDeclList),
  ')',
  ..._prettifyReturnType(a.returnType),
  ..._prettifyThrowType(a.throwType),
  '{',
  ..._prettifyListDecl(a.declList),
  'return',
  ..._prettifyExpr(a.expr),
  '}',
];

Iterable<String> _prettifyDeclTypeAlias(ast.DeclTypeAlias a) => [
  'type',
  ..._prettifyStellaIdent(a.stellaIdent),
  '=',
  ..._prettifyStellaType(a.stellaType),
];

Iterable<String> _prettifyDeclExceptionType(ast.DeclExceptionType a) => [
  'exception',
  'type',
  '=',
  ..._prettifyStellaType(a.stellaType),
];

Iterable<String> _prettifyDeclExceptionVariant(ast.DeclExceptionVariant a) => [
  'exception',
  'variant',
  ..._prettifyStellaIdent(a.stellaIdent),
  ':',
  ..._prettifyStellaType(a.stellaType),
];

String printDeclFun(ast.DeclFun x) => _renderer.print(_prettifyDeclFun(x));
String printDeclFunGeneric(ast.DeclFunGeneric x) => _renderer.print(_prettifyDeclFunGeneric(x));
String printDeclTypeAlias(ast.DeclTypeAlias x) => _renderer.print(_prettifyDeclTypeAlias(x));
String printDeclExceptionType(ast.DeclExceptionType x) => _renderer.print(_prettifyDeclExceptionType(x));
String printDeclExceptionVariant(ast.DeclExceptionVariant x) => _renderer.print(_prettifyDeclExceptionVariant(x));
Iterable<String> _prettifyListDecl(Iterable<ast.Decl> a) => [...a.expand((e1) => ['', ..._prettifyDecl(e1)],).skip(1), '',];
String printListDecl(Iterable<ast.Decl> x) => _renderer.print(_prettifyListDecl(x));
Iterable<String> _prettifyALocalDecl(ast.ALocalDecl a) => [
  ..._prettifyDecl(a.decl),
];

String printALocalDecl(ast.ALocalDecl x) => _renderer.print(_prettifyALocalDecl(x));
Iterable<String> _prettifyListLocalDecl(Iterable<ast.LocalDecl> a) => [...a.expand((e1) => [';', ..._prettifyLocalDecl(e1)],).skip(1), '',];
String printListLocalDecl(Iterable<ast.LocalDecl> x) => _renderer.print(_prettifyListLocalDecl(x));
Iterable<String> _prettifyInlineAnnotation(ast.InlineAnnotation a) => [
  'inline',
];

String printInlineAnnotation(ast.InlineAnnotation x) => _renderer.print(_prettifyInlineAnnotation(x));
Iterable<String> _prettifyListAnnotation(Iterable<ast.Annotation> a) => [...a.expand((e1) => ['', ..._prettifyAnnotation(e1)],).skip(1), '',];
String printListAnnotation(Iterable<ast.Annotation> x) => _renderer.print(_prettifyListAnnotation(x));
Iterable<String> _prettifyAParamDecl(ast.AParamDecl a) => [
  ..._prettifyStellaIdent(a.stellaIdent),
  ':',
  ..._prettifyStellaType(a.stellaType),
];

String printAParamDecl(ast.AParamDecl x) => _renderer.print(_prettifyAParamDecl(x));
Iterable<String> _prettifyListParamDecl(Iterable<ast.ParamDecl> a) => [...a.expand((e1) => [',', ..._prettifyParamDecl(e1)],).skip(1), '',];
String printListParamDecl(Iterable<ast.ParamDecl> x) => _renderer.print(_prettifyListParamDecl(x));
Iterable<String> _prettifyNoReturnType(ast.NoReturnType a) => [
];

Iterable<String> _prettifySomeReturnType(ast.SomeReturnType a) => [
  '->',
  ..._prettifyStellaType(a.stellaType),
];

String printNoReturnType(ast.NoReturnType x) => _renderer.print(_prettifyNoReturnType(x));
String printSomeReturnType(ast.SomeReturnType x) => _renderer.print(_prettifySomeReturnType(x));
Iterable<String> _prettifyNoThrowType(ast.NoThrowType a) => [
];

Iterable<String> _prettifySomeThrowType(ast.SomeThrowType a) => [
  'throws',
  ..._prettifyListStellaType9(a.stellaTypeList),
];

String printNoThrowType(ast.NoThrowType x) => _renderer.print(_prettifyNoThrowType(x));
String printSomeThrowType(ast.SomeThrowType x) => _renderer.print(_prettifySomeThrowType(x));
Iterable<String> _prettifyListStellaType9(Iterable<ast.StellaType> a) => [...a.expand((e1) => [',', ..._prettifyStellaType(e1)],).skip(1), '',];
String printListStellaType9(Iterable<ast.StellaType> x) => _renderer.print(_prettifyListStellaType9(x));
Iterable<String> _prettifyAMatchCase(ast.AMatchCase a) => [
  ..._prettifyPattern(a.pattern),
  '=>',
  ..._prettifyExpr(a.expr),
];

String printAMatchCase(ast.AMatchCase x) => _renderer.print(_prettifyAMatchCase(x));
Iterable<String> _prettifyListMatchCase(Iterable<ast.MatchCase> a) => [...a.expand((e1) => ['|', ..._prettifyMatchCase(e1)],).skip(1), '',];
String printListMatchCase(Iterable<ast.MatchCase> x) => _renderer.print(_prettifyListMatchCase(x));
Iterable<String> _prettifyNoTyping(ast.NoTyping a) => [
];

Iterable<String> _prettifySomeTyping(ast.SomeTyping a) => [
  ':',
  ..._prettifyStellaType(a.stellaType),
];

String printNoTyping(ast.NoTyping x) => _renderer.print(_prettifyNoTyping(x));
String printSomeTyping(ast.SomeTyping x) => _renderer.print(_prettifySomeTyping(x));
Iterable<String> _prettifyNoPatternData(ast.NoPatternData a) => [
];

Iterable<String> _prettifySomePatternData(ast.SomePatternData a) => [
  '=',
  ..._prettifyPattern(a.pattern),
];

String printNoPatternData(ast.NoPatternData x) => _renderer.print(_prettifyNoPatternData(x));
String printSomePatternData(ast.SomePatternData x) => _renderer.print(_prettifySomePatternData(x));
Iterable<String> _prettifyNoExprData(ast.NoExprData a) => [
];

Iterable<String> _prettifySomeExprData(ast.SomeExprData a) => [
  '=',
  ..._prettifyExpr(a.expr),
];

String printNoExprData(ast.NoExprData x) => _renderer.print(_prettifyNoExprData(x));
String printSomeExprData(ast.SomeExprData x) => _renderer.print(_prettifySomeExprData(x));
Iterable<String> _prettifyPatternVariant(ast.PatternVariant a) => [
  '<|',
  ..._prettifyStellaIdent(a.stellaIdent),
  ..._prettifyPatternData(a.patternData),
  '|>',
];

Iterable<String> _prettifyPatternInl(ast.PatternInl a) => [
  'inl',
  '(',
  ..._prettifyPattern(a.pattern),
  ')',
];

Iterable<String> _prettifyPatternInr(ast.PatternInr a) => [
  'inr',
  '(',
  ..._prettifyPattern(a.pattern),
  ')',
];

Iterable<String> _prettifyPatternTuple(ast.PatternTuple a) => [
  '{',
  ..._prettifyListPattern(a.patternList),
  '}',
];

Iterable<String> _prettifyPatternRecord(ast.PatternRecord a) => [
  '{',
  ..._prettifyListLabelledPattern(a.labelledPatternList),
  '}',
];

Iterable<String> _prettifyPatternList(ast.PatternList a) => [
  '[',
  ..._prettifyListPattern(a.patternList),
  ']',
];

Iterable<String> _prettifyPatternCons(ast.PatternCons a) => [
  '(',
  ..._prettifyPattern(a.pattern2),
  ',',
  ..._prettifyPattern(a.pattern1),
  ')',
];

Iterable<String> _prettifyPatternFalse(ast.PatternFalse a) => [
  'false',
];

Iterable<String> _prettifyPatternTrue(ast.PatternTrue a) => [
  'true',
];

Iterable<String> _prettifyPatternUnit(ast.PatternUnit a) => [
  'unit',
];

Iterable<String> _prettifyPatternInt(ast.PatternInt a) => [
  a.integer.print,
];

Iterable<String> _prettifyPatternSucc(ast.PatternSucc a) => [
  'succ',
  '(',
  ..._prettifyPattern(a.pattern),
  ')',
];

Iterable<String> _prettifyPatternVar(ast.PatternVar a) => [
  ..._prettifyStellaIdent(a.stellaIdent),
];

String printPatternVariant(ast.PatternVariant x) => _renderer.print(_prettifyPatternVariant(x));
String printPatternInl(ast.PatternInl x) => _renderer.print(_prettifyPatternInl(x));
String printPatternInr(ast.PatternInr x) => _renderer.print(_prettifyPatternInr(x));
String printPatternTuple(ast.PatternTuple x) => _renderer.print(_prettifyPatternTuple(x));
String printPatternRecord(ast.PatternRecord x) => _renderer.print(_prettifyPatternRecord(x));
String printPatternList(ast.PatternList x) => _renderer.print(_prettifyPatternList(x));
String printPatternCons(ast.PatternCons x) => _renderer.print(_prettifyPatternCons(x));
String printPatternFalse(ast.PatternFalse x) => _renderer.print(_prettifyPatternFalse(x));
String printPatternTrue(ast.PatternTrue x) => _renderer.print(_prettifyPatternTrue(x));
String printPatternUnit(ast.PatternUnit x) => _renderer.print(_prettifyPatternUnit(x));
String printPatternInt(ast.PatternInt x) => _renderer.print(_prettifyPatternInt(x));
String printPatternSucc(ast.PatternSucc x) => _renderer.print(_prettifyPatternSucc(x));
String printPatternVar(ast.PatternVar x) => _renderer.print(_prettifyPatternVar(x));
Iterable<String> _prettifyListPattern(Iterable<ast.Pattern> a) => [...a.expand((e1) => [',', ..._prettifyPattern(e1)],).skip(1), '',];
String printListPattern(Iterable<ast.Pattern> x) => _renderer.print(_prettifyListPattern(x));
Iterable<String> _prettifyALabelledPattern(ast.ALabelledPattern a) => [
  ..._prettifyStellaIdent(a.stellaIdent),
  '=',
  ..._prettifyPattern(a.pattern),
];

String printALabelledPattern(ast.ALabelledPattern x) => _renderer.print(_prettifyALabelledPattern(x));
Iterable<String> _prettifyListLabelledPattern(Iterable<ast.LabelledPattern> a) => [...a.expand((e1) => [',', ..._prettifyLabelledPattern(e1)],).skip(1), '',];
String printListLabelledPattern(Iterable<ast.LabelledPattern> x) => _renderer.print(_prettifyListLabelledPattern(x));
Iterable<String> _prettifyABinding(ast.ABinding a) => [
  ..._prettifyStellaIdent(a.stellaIdent),
  '=',
  ..._prettifyExpr(a.expr),
];

String printABinding(ast.ABinding x) => _renderer.print(_prettifyABinding(x));
Iterable<String> _prettifyListBinding(Iterable<ast.Binding> a) => [...a.expand((e1) => [',', ..._prettifyBinding(e1)],).skip(1), '',];
String printListBinding(Iterable<ast.Binding> x) => _renderer.print(_prettifyListBinding(x));
Iterable<String> _prettifySequence(ast.Sequence a) => [
  ..._prettifyExpr(a.expr2),
  ';',
  ..._prettifyExpr(a.expr1),
];

Iterable<String> _prettifyLet(ast.Let a) => [
  'let',
  ..._prettifyListPatternBinding(a.patternBindingList),
  'in',
  ..._prettifyExpr(a.expr),
];

Iterable<String> _prettifyLetRec(ast.LetRec a) => [
  'letrec',
  ..._prettifyListPatternBinding(a.patternBindingList),
  'in',
  ..._prettifyExpr(a.expr),
];

Iterable<String> _prettifyTypeAbstraction(ast.TypeAbstraction a) => [
  'generic',
  '[',
  ..._prettifyListStellaIdent(a.stellaIdentList),
  ']',
  ..._prettifyExpr(a.expr),
];

String printSequence(ast.Sequence x) => _renderer.print(_prettifySequence(x));
String printLet(ast.Let x) => _renderer.print(_prettifyLet(x));
String printLetRec(ast.LetRec x) => _renderer.print(_prettifyLetRec(x));
String printTypeAbstraction(ast.TypeAbstraction x) => _renderer.print(_prettifyTypeAbstraction(x));
Iterable<String> _prettifyListExpr(Iterable<ast.Expr> a) => [...a.expand((e1) => [',', ..._prettifyExpr(e1)],).skip(1), '',];
String printListExpr(Iterable<ast.Expr> x) => _renderer.print(_prettifyListExpr(x));
Iterable<String> _prettifyAssign(ast.Assign a) => [
  ..._prettifyExpr(a.expr2),
  ':=',
  ..._prettifyExpr(a.expr1),
];

Iterable<String> _prettifyStellaIf(ast.StellaIf a) => [
  'if',
  ..._prettifyExpr(a.expr3),
  'then',
  ..._prettifyExpr(a.expr2),
  'else',
  ..._prettifyExpr(a.expr1),
];

String printAssign(ast.Assign x) => _renderer.print(_prettifyAssign(x));
String printStellaIf(ast.StellaIf x) => _renderer.print(_prettifyStellaIf(x));
Iterable<String> _prettifyAPatternBinding(ast.APatternBinding a) => [
  ..._prettifyPattern(a.pattern),
  '=',
  ..._prettifyExpr(a.expr),
];

String printAPatternBinding(ast.APatternBinding x) => _renderer.print(_prettifyAPatternBinding(x));
Iterable<String> _prettifyListPatternBinding(Iterable<ast.PatternBinding> a) => [...a.expand((e1) => [',', ..._prettifyPatternBinding(e1)],).skip(1), '',];
String printListPatternBinding(Iterable<ast.PatternBinding> x) => _renderer.print(_prettifyListPatternBinding(x));
Iterable<String> _prettifyLessThan(ast.LessThan a) => [
  ..._prettifyExpr(a.expr2),
  '<',
  ..._prettifyExpr(a.expr1),
];

Iterable<String> _prettifyLessThanOrEqual(ast.LessThanOrEqual a) => [
  ..._prettifyExpr(a.expr2),
  '<=',
  ..._prettifyExpr(a.expr1),
];

Iterable<String> _prettifyGreaterThan(ast.GreaterThan a) => [
  ..._prettifyExpr(a.expr2),
  '>',
  ..._prettifyExpr(a.expr1),
];

Iterable<String> _prettifyGreaterThanOrEqual(ast.GreaterThanOrEqual a) => [
  ..._prettifyExpr(a.expr2),
  '>=',
  ..._prettifyExpr(a.expr1),
];

Iterable<String> _prettifyEqual(ast.Equal a) => [
  ..._prettifyExpr(a.expr2),
  '==',
  ..._prettifyExpr(a.expr1),
];

Iterable<String> _prettifyNotEqual(ast.NotEqual a) => [
  ..._prettifyExpr(a.expr2),
  '!=',
  ..._prettifyExpr(a.expr1),
];

String printLessThan(ast.LessThan x) => _renderer.print(_prettifyLessThan(x));
String printLessThanOrEqual(ast.LessThanOrEqual x) => _renderer.print(_prettifyLessThanOrEqual(x));
String printGreaterThan(ast.GreaterThan x) => _renderer.print(_prettifyGreaterThan(x));
String printGreaterThanOrEqual(ast.GreaterThanOrEqual x) => _renderer.print(_prettifyGreaterThanOrEqual(x));
String printEqual(ast.Equal x) => _renderer.print(_prettifyEqual(x));
String printNotEqual(ast.NotEqual x) => _renderer.print(_prettifyNotEqual(x));
Iterable<String> _prettifyListExpr2(Iterable<ast.Expr> a) => [...a.expand((e1) => [';', ..._prettifyExpr(e1)],).skip(1), ';',];
String printListExpr2(Iterable<ast.Expr> x) => _renderer.print(_prettifyListExpr2(x));
Iterable<String> _prettifyTypeAsc(ast.TypeAsc a) => [
  ..._prettifyExpr(a.expr),
  'as',
  ..._prettifyStellaType(a.stellaType),
];

Iterable<String> _prettifyTypeCast(ast.TypeCast a) => [
  ..._prettifyExpr(a.expr),
  'cast',
  'as',
  ..._prettifyStellaType(a.stellaType),
];

Iterable<String> _prettifyAbstraction(ast.Abstraction a) => [
  'fn',
  '(',
  ..._prettifyListParamDecl(a.paramDeclList),
  ')',
  '{',
  'return',
  ..._prettifyExpr(a.expr),
  '}',
];

Iterable<String> _prettifyVariant(ast.Variant a) => [
  '<|',
  ..._prettifyStellaIdent(a.stellaIdent),
  ..._prettifyExprData(a.exprData),
  '|>',
];

Iterable<String> _prettifyMatch(ast.Match a) => [
  'match',
  ..._prettifyExpr(a.expr),
  '{',
  ..._prettifyListMatchCase(a.matchCaseList),
  '}',
];

Iterable<String> _prettifyStellaList(ast.StellaList a) => [
  '[',
  ..._prettifyListExpr(a.exprList),
  ']',
];

Iterable<String> _prettifyAdd(ast.Add a) => [
  ..._prettifyExpr(a.expr2),
  '+',
  ..._prettifyExpr(a.expr1),
];

Iterable<String> _prettifySubtract(ast.Subtract a) => [
  ..._prettifyExpr(a.expr2),
  '-',
  ..._prettifyExpr(a.expr1),
];

Iterable<String> _prettifyLogicOr(ast.LogicOr a) => [
  ..._prettifyExpr(a.expr2),
  'or',
  ..._prettifyExpr(a.expr1),
];

String printTypeAsc(ast.TypeAsc x) => _renderer.print(_prettifyTypeAsc(x));
String printTypeCast(ast.TypeCast x) => _renderer.print(_prettifyTypeCast(x));
String printAbstraction(ast.Abstraction x) => _renderer.print(_prettifyAbstraction(x));
String printVariant(ast.Variant x) => _renderer.print(_prettifyVariant(x));
String printMatch(ast.Match x) => _renderer.print(_prettifyMatch(x));
String printStellaList(ast.StellaList x) => _renderer.print(_prettifyStellaList(x));
String printAdd(ast.Add x) => _renderer.print(_prettifyAdd(x));
String printSubtract(ast.Subtract x) => _renderer.print(_prettifySubtract(x));
String printLogicOr(ast.LogicOr x) => _renderer.print(_prettifyLogicOr(x));
Iterable<String> _prettifyMultiply(ast.Multiply a) => [
  ..._prettifyExpr(a.expr2),
  '*',
  ..._prettifyExpr(a.expr1),
];

Iterable<String> _prettifyDivide(ast.Divide a) => [
  ..._prettifyExpr(a.expr2),
  '/',
  ..._prettifyExpr(a.expr1),
];

Iterable<String> _prettifyLogicAnd(ast.LogicAnd a) => [
  ..._prettifyExpr(a.expr2),
  'and',
  ..._prettifyExpr(a.expr1),
];

String printMultiply(ast.Multiply x) => _renderer.print(_prettifyMultiply(x));
String printDivide(ast.Divide x) => _renderer.print(_prettifyDivide(x));
String printLogicAnd(ast.LogicAnd x) => _renderer.print(_prettifyLogicAnd(x));
Iterable<String> _prettifyRef(ast.Ref a) => [
  'new',
  '(',
  ..._prettifyExpr(a.expr),
  ')',
];

Iterable<String> _prettifyDeref(ast.Deref a) => [
  '*',
  ..._prettifyExpr(a.expr),
];

String printRef(ast.Ref x) => _renderer.print(_prettifyRef(x));
String printDeref(ast.Deref x) => _renderer.print(_prettifyDeref(x));
Iterable<String> _prettifyApplication(ast.Application a) => [
  ..._prettifyExpr(a.expr),
  '(',
  ..._prettifyListExpr(a.exprList),
  ')',
];

Iterable<String> _prettifyTypeApplication(ast.TypeApplication a) => [
  ..._prettifyExpr(a.expr),
  '[',
  ..._prettifyListStellaType(a.stellaTypeList),
  ']',
];

Iterable<String> _prettifyDotRecord(ast.DotRecord a) => [
  ..._prettifyExpr(a.expr),
  '.',
  ..._prettifyStellaIdent(a.stellaIdent),
];

Iterable<String> _prettifyDotTuple(ast.DotTuple a) => [
  ..._prettifyExpr(a.expr),
  '.',
  a.integer.print,
];

Iterable<String> _prettifyTuple(ast.Tuple a) => [
  '{',
  ..._prettifyListExpr(a.exprList),
  '}',
];

Iterable<String> _prettifyRecord(ast.Record a) => [
  '{',
  ..._prettifyListBinding(a.bindingList),
  '}',
];

Iterable<String> _prettifyConsList(ast.ConsList a) => [
  'cons',
  '(',
  ..._prettifyExpr(a.expr2),
  ',',
  ..._prettifyExpr(a.expr1),
  ')',
];

Iterable<String> _prettifyHead(ast.Head a) => [
  'List::head',
  '(',
  ..._prettifyExpr(a.expr),
  ')',
];

Iterable<String> _prettifyIsEmpty(ast.IsEmpty a) => [
  'List::isempty',
  '(',
  ..._prettifyExpr(a.expr),
  ')',
];

Iterable<String> _prettifyTail(ast.Tail a) => [
  'List::tail',
  '(',
  ..._prettifyExpr(a.expr),
  ')',
];

Iterable<String> _prettifyPanic(ast.Panic a) => [
  'panic!',
];

Iterable<String> _prettifyStellaThrow(ast.StellaThrow a) => [
  'throw',
  '(',
  ..._prettifyExpr(a.expr),
  ')',
];

Iterable<String> _prettifyTryCatch(ast.TryCatch a) => [
  'try',
  '{',
  ..._prettifyExpr(a.expr2),
  '}',
  'catch',
  '{',
  ..._prettifyPattern(a.pattern),
  '=>',
  ..._prettifyExpr(a.expr1),
  '}',
];

Iterable<String> _prettifyTryWith(ast.TryWith a) => [
  'try',
  '{',
  ..._prettifyExpr(a.expr2),
  '}',
  'with',
  '{',
  ..._prettifyExpr(a.expr1),
  '}',
];

Iterable<String> _prettifyInl(ast.Inl a) => [
  'inl',
  '(',
  ..._prettifyExpr(a.expr),
  ')',
];

Iterable<String> _prettifyInr(ast.Inr a) => [
  'inr',
  '(',
  ..._prettifyExpr(a.expr),
  ')',
];

Iterable<String> _prettifySucc(ast.Succ a) => [
  'succ',
  '(',
  ..._prettifyExpr(a.expr),
  ')',
];

Iterable<String> _prettifyLogicNot(ast.LogicNot a) => [
  'not',
  '(',
  ..._prettifyExpr(a.expr),
  ')',
];

Iterable<String> _prettifyPred(ast.Pred a) => [
  'Nat::pred',
  '(',
  ..._prettifyExpr(a.expr),
  ')',
];

Iterable<String> _prettifyIsZero(ast.IsZero a) => [
  'Nat::iszero',
  '(',
  ..._prettifyExpr(a.expr),
  ')',
];

Iterable<String> _prettifyFix(ast.Fix a) => [
  'fix',
  '(',
  ..._prettifyExpr(a.expr),
  ')',
];

Iterable<String> _prettifyNatRec(ast.NatRec a) => [
  'Nat::rec',
  '(',
  ..._prettifyExpr(a.expr3),
  ',',
  ..._prettifyExpr(a.expr2),
  ',',
  ..._prettifyExpr(a.expr1),
  ')',
];

Iterable<String> _prettifyFold(ast.Fold a) => [
  'fold',
  '[',
  ..._prettifyStellaType(a.stellaType),
  ']',
  ..._prettifyExpr(a.expr),
];

Iterable<String> _prettifyUnfold(ast.Unfold a) => [
  'unfold',
  '[',
  ..._prettifyStellaType(a.stellaType),
  ']',
  ..._prettifyExpr(a.expr),
];

String printApplication(ast.Application x) => _renderer.print(_prettifyApplication(x));
String printTypeApplication(ast.TypeApplication x) => _renderer.print(_prettifyTypeApplication(x));
String printDotRecord(ast.DotRecord x) => _renderer.print(_prettifyDotRecord(x));
String printDotTuple(ast.DotTuple x) => _renderer.print(_prettifyDotTuple(x));
String printTuple(ast.Tuple x) => _renderer.print(_prettifyTuple(x));
String printRecord(ast.Record x) => _renderer.print(_prettifyRecord(x));
String printConsList(ast.ConsList x) => _renderer.print(_prettifyConsList(x));
String printHead(ast.Head x) => _renderer.print(_prettifyHead(x));
String printIsEmpty(ast.IsEmpty x) => _renderer.print(_prettifyIsEmpty(x));
String printTail(ast.Tail x) => _renderer.print(_prettifyTail(x));
String printPanic(ast.Panic x) => _renderer.print(_prettifyPanic(x));
String printStellaThrow(ast.StellaThrow x) => _renderer.print(_prettifyStellaThrow(x));
String printTryCatch(ast.TryCatch x) => _renderer.print(_prettifyTryCatch(x));
String printTryWith(ast.TryWith x) => _renderer.print(_prettifyTryWith(x));
String printInl(ast.Inl x) => _renderer.print(_prettifyInl(x));
String printInr(ast.Inr x) => _renderer.print(_prettifyInr(x));
String printSucc(ast.Succ x) => _renderer.print(_prettifySucc(x));
String printLogicNot(ast.LogicNot x) => _renderer.print(_prettifyLogicNot(x));
String printPred(ast.Pred x) => _renderer.print(_prettifyPred(x));
String printIsZero(ast.IsZero x) => _renderer.print(_prettifyIsZero(x));
String printFix(ast.Fix x) => _renderer.print(_prettifyFix(x));
String printNatRec(ast.NatRec x) => _renderer.print(_prettifyNatRec(x));
String printFold(ast.Fold x) => _renderer.print(_prettifyFold(x));
String printUnfold(ast.Unfold x) => _renderer.print(_prettifyUnfold(x));
Iterable<String> _prettifyConstTrue(ast.ConstTrue a) => [
  'true',
];

Iterable<String> _prettifyConstFalse(ast.ConstFalse a) => [
  'false',
];

Iterable<String> _prettifyConstUnit(ast.ConstUnit a) => [
  'unit',
];

Iterable<String> _prettifyConstInt(ast.ConstInt a) => [
  a.integer.print,
];

Iterable<String> _prettifyConstDouble(ast.ConstDouble a) => [
  a.stellaDouble.print,
];

Iterable<String> _prettifyConstMemory(ast.ConstMemory a) => [
  ..._prettifyMemoryAddress(a.memoryAddress),
];

Iterable<String> _prettifyStellaVar(ast.StellaVar a) => [
  ..._prettifyStellaIdent(a.stellaIdent),
];

String printConstTrue(ast.ConstTrue x) => _renderer.print(_prettifyConstTrue(x));
String printConstFalse(ast.ConstFalse x) => _renderer.print(_prettifyConstFalse(x));
String printConstUnit(ast.ConstUnit x) => _renderer.print(_prettifyConstUnit(x));
String printConstInt(ast.ConstInt x) => _renderer.print(_prettifyConstInt(x));
String printConstDouble(ast.ConstDouble x) => _renderer.print(_prettifyConstDouble(x));
String printConstMemory(ast.ConstMemory x) => _renderer.print(_prettifyConstMemory(x));
String printStellaVar(ast.StellaVar x) => _renderer.print(_prettifyStellaVar(x));
Iterable<String> _prettifyTypeFun(ast.TypeFun a) => [
  'fn',
  '(',
  ..._prettifyListStellaType(a.stellaTypeList),
  ')',
  '->',
  ..._prettifyStellaType(a.stellaType),
];

Iterable<String> _prettifyTypeForAll(ast.TypeForAll a) => [
  'forall',
  ..._prettifyListStellaIdent(a.stellaIdentList),
  '.',
  ..._prettifyStellaType(a.stellaType),
];

Iterable<String> _prettifyTypeRec(ast.TypeRec a) => [
  'µ',
  ..._prettifyStellaIdent(a.stellaIdent),
  '.',
  ..._prettifyStellaType(a.stellaType),
];

String printTypeFun(ast.TypeFun x) => _renderer.print(_prettifyTypeFun(x));
String printTypeForAll(ast.TypeForAll x) => _renderer.print(_prettifyTypeForAll(x));
String printTypeRec(ast.TypeRec x) => _renderer.print(_prettifyTypeRec(x));
Iterable<String> _prettifyTypeSum(ast.TypeSum a) => [
  ..._prettifyStellaType(a.stellaType2),
  '+',
  ..._prettifyStellaType(a.stellaType1),
];

String printTypeSum(ast.TypeSum x) => _renderer.print(_prettifyTypeSum(x));
Iterable<String> _prettifyTypeTuple(ast.TypeTuple a) => [
  '{',
  ..._prettifyListStellaType(a.stellaTypeList),
  '}',
];

Iterable<String> _prettifyTypeRecord(ast.TypeRecord a) => [
  '{',
  ..._prettifyListRecordFieldType(a.recordFieldTypeList),
  '}',
];

Iterable<String> _prettifyTypeVariant(ast.TypeVariant a) => [
  '<|',
  ..._prettifyListVariantFieldType(a.variantFieldTypeList),
  '|>',
];

Iterable<String> _prettifyTypeList(ast.TypeList a) => [
  '[',
  ..._prettifyStellaType(a.stellaType),
  ']',
];

String printTypeTuple(ast.TypeTuple x) => _renderer.print(_prettifyTypeTuple(x));
String printTypeRecord(ast.TypeRecord x) => _renderer.print(_prettifyTypeRecord(x));
String printTypeVariant(ast.TypeVariant x) => _renderer.print(_prettifyTypeVariant(x));
String printTypeList(ast.TypeList x) => _renderer.print(_prettifyTypeList(x));
Iterable<String> _prettifyTypeBool(ast.TypeBool a) => [
  'Bool',
];

Iterable<String> _prettifyTypeNat(ast.TypeNat a) => [
  'Nat',
];

Iterable<String> _prettifyTypeUnit(ast.TypeUnit a) => [
  'Unit',
];

Iterable<String> _prettifyTypeTop(ast.TypeTop a) => [
  'Top',
];

Iterable<String> _prettifyTypeBottom(ast.TypeBottom a) => [
  'Bot',
];

Iterable<String> _prettifyTypeRef(ast.TypeRef a) => [
  '&',
  ..._prettifyStellaType(a.stellaType),
];

Iterable<String> _prettifyTypeVar(ast.TypeVar a) => [
  ..._prettifyStellaIdent(a.stellaIdent),
];

String printTypeBool(ast.TypeBool x) => _renderer.print(_prettifyTypeBool(x));
String printTypeNat(ast.TypeNat x) => _renderer.print(_prettifyTypeNat(x));
String printTypeUnit(ast.TypeUnit x) => _renderer.print(_prettifyTypeUnit(x));
String printTypeTop(ast.TypeTop x) => _renderer.print(_prettifyTypeTop(x));
String printTypeBottom(ast.TypeBottom x) => _renderer.print(_prettifyTypeBottom(x));
String printTypeRef(ast.TypeRef x) => _renderer.print(_prettifyTypeRef(x));
String printTypeVar(ast.TypeVar x) => _renderer.print(_prettifyTypeVar(x));
Iterable<String> _prettifyListStellaType(Iterable<ast.StellaType> a) => [...a.expand((e1) => [',', ..._prettifyStellaType(e1)],).skip(1), '',];
String printListStellaType(Iterable<ast.StellaType> x) => _renderer.print(_prettifyListStellaType(x));
Iterable<String> _prettifyAVariantFieldType(ast.AVariantFieldType a) => [
  ..._prettifyStellaIdent(a.stellaIdent),
  ..._prettifyOptionalTyping(a.optionalTyping),
];

String printAVariantFieldType(ast.AVariantFieldType x) => _renderer.print(_prettifyAVariantFieldType(x));
Iterable<String> _prettifyListVariantFieldType(Iterable<ast.VariantFieldType> a) => [...a.expand((e1) => [',', ..._prettifyVariantFieldType(e1)],).skip(1), '',];
String printListVariantFieldType(Iterable<ast.VariantFieldType> x) => _renderer.print(_prettifyListVariantFieldType(x));
Iterable<String> _prettifyARecordFieldType(ast.ARecordFieldType a) => [
  ..._prettifyStellaIdent(a.stellaIdent),
  ':',
  ..._prettifyStellaType(a.stellaType),
];

String printARecordFieldType(ast.ARecordFieldType x) => _renderer.print(_prettifyARecordFieldType(x));
Iterable<String> _prettifyListRecordFieldType(Iterable<ast.RecordFieldType> a) => [...a.expand((e1) => [',', ..._prettifyRecordFieldType(e1)],).skip(1), '',];
String printListRecordFieldType(Iterable<ast.RecordFieldType> x) => _renderer.print(_prettifyListRecordFieldType(x));
Iterable<String> _prettifyATyping(ast.ATyping a) => [
  ..._prettifyExpr(a.expr),
  ':',
  ..._prettifyStellaType(a.stellaType),
];

String printATyping(ast.ATyping x) => _renderer.print(_prettifyATyping(x));
